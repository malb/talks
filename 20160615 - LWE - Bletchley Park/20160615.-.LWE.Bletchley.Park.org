#+TITLE: Learning with Errors
#+SUBTITLE: Post-Quantum Candidates from Noisy Linear Systems
#+AUTHOR: Martin R. Albrecht \texttt{@martinralbrecht}
#+EMAIL: martin.albrecht@royalholloway.ac.uk
#+DATE: 15 June 2016 — Bletchley Park
#+STARTUP: beamer indent

#+OPTIONS: H:2 toc:t num:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: mbeamer
#+LaTeX_HEADER: \newcommand{\ZZ}[1][blank]{\ensuremath{\ifthenelse{\equal{#1}{blank}}{\mathbb{Z}}{\mathbb{Z}\left[#1\right]}\xspace}}
#+LaTeX_HEADER: \newcommand{\QQ}[1][blank]{\ensuremath{\ifthenelse{\equal{#1}{blank}}{\mathbb{Q}}{\mathbb{Q}\left[#1\right]}\xspace}}
#+LaTeX_HEADER: \newcommand{\ZZq}[1][blank]{\ensuremath{\ifthenelse{\equal{#1}{blank}}{\mathbb{Z}_q}{\mathbb{Z}_q\left[#1\right]}\xspace}}
#+LaTeX_HEADER: \renewcommand{\U}[1]{\ensuremath{\mathcal{U}\left( {#1} \right)}\xspace}
#+LaTeX_HEADER: \newcommand{\mat}[1]{\ensuremath{\mathbf{#1}}\xspace}
#+LaTeX_HEADER: \renewcommand{\vec}[1]{\ensuremath{\mathbf{#1}}\xspace}
#+LaTeX_HEADER: \newcommand{\sample}{\ensuremath{\leftarrow_{\$}}}
#+LaTeX_HEADER: \definecolor{lightblue}{HTML}{4B8EC8}

#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %4BEAMER_ACT(Act) %4BEAMER_COL(Col) %4BEAMER_OPT(Opt)

#+PROPERTY: header-args:sage :tolatex lambda obj: r'(%s)' % latex(obj) :results raw

* Motivation

** A Typical Scenario 

#+BEGIN_SRC plantuml :file keyex.png :tangle no :exports results
skinparam monochrome true
skinparam dpi 600
skinparam backgroundColor transparent
skinparam classBackgroundColor transparent
skinparam style strictuml
skinparam handwritten true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil

activate Client
Client -> Server: g<sup>a</sup>
activate Server
Client <- Server: g<sup>b</sup>, sign<sub>sk</sub>(g<sup>b</sup>)
note left: K= g<sup>ab</sup>
Client -> Server: E<sub>K</sub>(data)
note right: K= g<sup>ab</sup>
Server --> Client: E<sub>K</sub>(more data)
deactivate Server
deactivate Client
#+END_SRC

#+BEGIN_CENTER
#+ATTR_LaTeX: :width 0.5\textwidth
#+RESULTS:
[[file:key exchange.png]]
#+END_CENTER

- $g^a$, $g^b$, $g^{ab}$ is a *Diffie-Hellman* triple
- sign$_{sk}(⋅)$ typically realised using *RSA* signatures

** Bye, bye DDH and RSA (?)

#+BEGIN_CENTER
Both problems are easy on quantum computers
#+END_CENTER

#+BEAMER: \pause

#+ATTR_BEAMER: :overlay +-
- fullcite:ETSI:PQ15
- fullcite:NSA:PQ15
- fullcite:CESG:PQ16


** Hello Post-Quantum

#+BEGIN_CENTER
[[./competition.png]]
#+END_CENTER


** Post-Quantum Families

- Multivariate Quadratic Cryptography
- Code-based Cryptography
- Hash-based Signatures
- *@@beamer:<2->@@Lattice-based Cryptography*

* Learning with Errors

** Linear System Solving

Given $(\vec{A},\vec{c})$ with $\vec{c} \in \ZZq^{m}$, $\vec{A} \in \ZZq^{m × n}$ and $\vec{s} \in \ZZq^{n}$ is

#+BEGIN_LaTeX
\[
\left(\begin{array}{c}
\\
\\
\\ 
\vec{c} \\
\\
\\
\\
\end{array} \right) = \left(
\begin{array}{ccc}
\leftarrow & n & \rightarrow \\
\\
\\ 
& \vec{A} & \\
\\
\\
\\
\end{array} \right) \times \left( \begin{array}{c}
\\
\vec{s} \\
\\
\end{array} \right)
\]
#+END_LaTeX

or $\vec{c} \sample \U{\ZZq^{m}}$.


** Learning with Errors

Given $(\vec{A},\vec{c})$ with $\vec{c} \in \ZZq^{m}$, $\vec{A} \in \ZZq^{m × n}$, $\vec{s} \in \ZZq^{n}$ and *small $\vec{e} \in \ZZ^{m}$* is

#+BEGIN_LaTeX
\[
\left(\begin{array}{c}
\\
\\
\\ 
\vec{c} \\
\\
\\
\\
\end{array} \right) = \left(
\begin{array}{ccc}
\leftarrow & n & \rightarrow \\
\\
\\ 
& \vec{A} & \\
\\
\\
\\
\end{array} \right) \times \left( \begin{array}{c}
\\
\vec{s} \\
\\
\end{array} \right) \alert{+ \left(
\begin{array}{c}
\\
\\
\\ 
\vec{e} \\
\\
\\
\\
\end{array} 
\right)}
\]
#+END_LaTeX

or $\vec{c} \sample \U{\ZZq^{m}}$.


** Parameters

***                                                           :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+BEGIN_LaTeX
\begin{tikzpicture}[scale=0.7]
  \begin{axis}[
    domain=-10:10,
    grid=major,smooth,
    xlabel=$x$,
    ylabel=$\approx \textnormal{Pr}(x)$,
    ]
    \addplot[color=mLightBrown,very thick,samples=50,smooth]{exp(-(x^2)/18)};
    \addplot[only marks,color=lightblue] coordinates {
      (-9, 0.011)
      (-8, 0.028)
      (-7, 0.065)
      (-6, 0.135)
      (-5, 0.249)
      (-4, 0.411)
      (-3, 0.606)
      (-2, 0.800)
      (-1, 0.945)
      (0, 1.000)
      (1, 0.945)
      (2, 0.800)
      (3, 0.606)
      (4, 0.411)
      (5, 0.249)
      (6, 0.135)
      (7, 0.065)
      (8, 0.028)
      (9, 0.011)
    };
  \end{axis}
\end{tikzpicture}
#+END_LaTeX


***                                                                    :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

- Parameters are: 
  - dimension $n$, 
  - modulus $q$ (e.g. $q \approx n^2$), 
  - noise size $\alpha$ (e.g. $\alpha q \approx \sqrt{n}$),
  - number of samples $m$.

- Elements of $\vec{A}, \vec{s}, \vec{e}, \vec{c}$ are in $\ZZ_q$.
- $\vec{e}$ is sampled from $χ_{α}$, a discrete Gaussian with width \[\sigma=\frac{\alpha q}{\sqrt{2 \pi}}.\]


** Lattices

- A lattice is a discrete additive subgroup of $\mathbb{R}^n$.

- Let $\vec{B} = \{ \vec{b}_1, \ldots, \vec{b}_n \}$ be $m$ linearly independent vectors in $\mathbb{R}^n$. Then $L(\vec{B})=\{ \sum_{i=1}^{n} x_i \vec{b}_i \,|\, x_i \in \ZZ\}$ is the lattice generated by $\vec{B}$. 

[[./joop-latt1.pdf]]

\tiny Picture Credit: Joop van der Pol


** Bounded Distance Decoding

Let $\vec{B} = [\vec{A} | q\vec{I}]^T$. LWE = BDD for $\vec{c}$ and $L(\vec{B})$.

[[./joop-cvp.pdf]]

\tiny Picture Credit: Joop van der Pol


** Shortest Vector Problem

- SVP :: Find the shortest non-zero vector in $L(\vec{B})$
- GapSVP$_γ$ :: return YES if $λ_1(L(\vec{B})) ≤ d$, and NO if $λ_1(L(\vec{B})) > γ⋅d$.

#+BEGIN_CENTER
[[./joop-l1.pdf]]
#+END_CENTER

\tiny Picture Credit: Joop van der Pol

** Good and Bad Bases

With a “good basis” many lattice problems are easy.

#+BEGIN_CENTER
[[./joop-latt1.pdf]]
#+END_CENTER

\tiny Picture Credit: Joop van der Pol


** Good and Bad Bases

With “bad basis” GapSVP$_γ$ for polynomial $γ$ assumed exponential.

#+BEGIN_CENTER
[[./joop-latt2a.pdf]]
#+END_CENTER

\tiny Picture Credit: Joop van der Pol


** Regev’s Reduction

*** 
:PROPERTIES:
:BEAMER_env: theorem
:END:

- Let $e$ follow $χ_α$, a (discrete) Gaussian distribution over $\ZZ$ with standard deviation $σ = \frac{α\, q}{\sqrt{2π}}$.
- If $σ >  \sqrt{n}$, worst-case GapSVP$_{\tilde{\mathcal{O}}(n/α)}$ reduces to average-case LWE.

***                                                          :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

fullcite:STOC:Regev05


** Encryption

- Public Key :: $\vec{A},\vec{c}$ with $\vec{c} = \vec{A}\cdot \vec{s} + \vec{e}$
- Secret Key :: $\vec{s}$
- Encrypt :: $\vec{b} \sample \{0,1\}^m$ and return $(\vec{a}',c')$ with $\vec{a}' = \vec{b} \cdot \vec{A}$, $c' = \langle \vec{b}, \vec{c} \rangle + m \cdot \lfloor q/2\rfloor + e'$ for $m \in \{0,1\}$

- Decrypt :: $c' - \langle \vec{a}', \vec{s} \rangle = \vec{b} \cdot \vec{A} \cdot \vec{s} + \langle \vec{b}, \vec{e} \rangle + \lfloor q/2 \rfloor \cdot m + e' -  \vec{b} \cdot \vec{A} \cdot \vec{s}$ 

** Key Exchange: LWE Normal Form

Given an LWE instance with $\vec{s} \sample \U{\ZZ_q^n}$, we can construct samples of the form $(\vec{a}, \langle \vec{a}, \vec{s}'\rangle+e)$ with $s_i'$ sampled from the distribution of $e$.

- Take $n$ rows and write $(\vec{A}, \vec{c}) = (\vec{A}, \vec{A}⋅\vec{s} + \vec{e})$.

- With good probability $\vec{A}$ is invertible.

- Get a row $(\vec{a}', c') = (\vec{a}', \langle \vec{a}', \vec{s}\rangle + e')$ and compute footfullcite:C:ACPS09 \[\vec{a}'⋅ \vec{A}^{-1} ⋅ \vec{c}-c' = \vec{a}' ⋅ \vec{A}^{-1} (\vec{A}⋅ \vec{s}+\vec{e}_0)- \vec{a}'·\vec{s}-e_1 = \vec{a}' ⋅ \vec{A}^{-1} ⋅ \vec{e} - e'.\]

- $(\vec{a}' ⋅ \vec{A}^{-1},\  \vec{a}'⋅ \vec{A}^{-1} ⋅ \vec{c}-c')$ is your new sample.


** Key Exchange footfullcite:SP:BCNS15,EPRINT:ADPS15

- Alice :: samples $\vec{A},\vec{c}_a=\vec{A}\cdot \vec{s}_a + \vec{e}_a$ with $\vec{s}_a \sample χ_α^n$  \\
     sends $(\vec{A},\vec{c})$
- Bob :: samples $\vec{c}_b=\vec{s}_b \cdot \vec{A} + \vec{e}_b$ with $\vec{s}_b \sample χ_α^n$ \\
     sends $\vec{c}_b$

*** Shared Secret                                                      :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:

\[\vec{s}_b \cdot (\vec{A} \cdot \vec{s}_a + \vec{e}_a) \approx (\vec{s}_b \cdot \vec{A} + \vec{e}_a) \cdot \vec{s}_a \approx \vec{s}_b \cdot \vec{A} \cdot \vec{s}_a\]

** Signatures (from SIS)

*** SIS                                                                :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:

Given $\vec{A} \in \mathbb{Z}_q^{m \times n}$ find *small* $\vec{s}$ such that $\vec{s}⋅\vec{A} = 0$ 

***                                                          :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

- Hash-and-Sign signatures footfullcite:STOC:GenPeiVai08

- Fiat-Shamir signatures footfullcite:C:DDLL13



* Challenges

** Regev’s Reduction

- @@beamer:<1->@@ An algorithm solving LWE 
  - for a fraction $1/n^{d_1}$
  - with advantage $1/n^{d_2}$
  - given $m = n^c$ samples 
  implies a polynomial-time algorithm solving GapSVP$_γ$ calling LWE solving oracle $\mathcal{O}(n^{11+c+d_1+2d_2})$ times.footfullcite:EPRINT:CKMS16

- @@beamer:<2->@@ “Solving LWE $n^{11+}$ times is hard”

- @@beamer:<3->@@ Best Known Attacks on LWE: $2^{\mathcal{O}(n)}$ time _and_ $2^{\mathcal{O}(n)}$ memory

** How Hard is $2^{\mathcal{O}(n)}$ Time and $2^{\mathcal{O}(n)}$ Memory?

- How big should we choose $n$, $q$ and the noise?
- Many problem formulations: SIS, BDD, uSVP, …
- Many algorithms: combinatorial, algebraic, geometric
- Quantum attacks

fullcite:JMC:AlbPlaSco15

** Lattice Reduction

***                                                                    :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

- Practically relevant algorithms rely on *lattice reduction* as a subroutine.
- Concrete performance of lattice reduction algorithms is not well understood.

***                                                                    :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:


#+BEGIN_LaTeX
\begin{tikzpicture}
\begin{axis}[domain=0:80,grid=major,smooth,xlabel=dimension,width=0.9\textwidth,height=0.5\textheight,
ylabel=SVP running time in $s$,]
\addplot[color=mLightBrown,very thick,smooth] coordinates {
( 3,  0.000910) ( 4,  0.000909) ( 5,  0.000936) ( 6,  0.000980) ( 7,  0.001024)
( 8,  0.001131) ( 9,  0.001141) (10,  0.001202) (11,  0.001270) (12,  0.001350)
(13,  0.001437) (14,  0.001540) (15,  0.001715) (16,  0.001806) (17,  0.001963)
(18,  0.002104) (19,  0.002211) (20,  0.002387) (21,  0.002614) (22,  0.002912)
(23,  0.003123) (24,  0.003419) (25,  0.003757) (26,  0.004183) (27,  0.004732)
(28,  0.005179) (29,  0.005966) (30,  0.006723) (31,  0.007673) (32,  0.008967)
(33,  0.011072) (34,  0.015257) (35,  0.013562) (36,  0.014296) (37,  0.017413)
(38,  0.021087) (39,  0.023248) (40,  0.021857) (41,  0.042012) (42,  0.032311)
(43,  0.036711) (44,  0.037855) (45,  0.054784) (46,  0.065419) (47,  0.083879)
(48,  0.082325) (49,  0.110854) (50,  0.120147) (51,  0.220014) (52,  0.143344)
(53,  0.191638) (54,  0.331177) (55,  0.236328) (56,  0.268762) (57,  0.506213)
(58,  0.534709) (59,  0.697577) (60,  0.748292) (61,  0.868768) (62,  1.125313)
(63,  1.744673) (64,  1.846011) (65,  2.368306) (66,  2.433754) (67,  3.704405)
(68,  4.205946) (69,  5.492047) (70,  5.995138) (71,  8.296805) (72,  9.878952)
(73, 13.587996) (74, 15.478631) (75, 23.804719) (76, 25.346042) (77, 41.266405)
(78, 46.407407) (79, 73.522041) (80, 86.350488)
};   
\end{axis}
\end{tikzpicture}
#+END_LaTeX

*** Software                                                         :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
- https://github.com/dstehle/fplll
- https://github.com/malb/fpylll
- http://perso.ens-lyon.fr/gilles.villard/hplll/


** Performance
 
- *Computational* cost for LWE is quite manageable because it only involves simple linear operations over $\mathbb{Z}_q$ where $q$ can be word-sized.
- Public-key and ciphertext *sizes* can be prohibitively expensive: $\mathcal{O}(n^2 \log_2 q)$ and $\mathcal{O}(n \log_2 q)$

*** Rule of Thumb                                                    :B_block:
:PROPERTIES:
:BEAMER_env: block
:BEAMER_act: <2->
:END:

Post-quantum schemes are not slow, but they are big.

** Better Performance: Ring-LWE
:PROPERTIES:
:BEAMER_env: block
:END:

- Replace random $\vec{A}$ by structured matrices, e.g. cyclic or nega-cyclic matrices.
- This is equivalent to computing in $\ZZ_q[x]/P(x)$.
- The problem is then called *Ring-LWE*.

#+BEAMER: \pause

*** No Silver Bullet
$n=1024, q≈ 2^{14} →$ 1792 bytes vs. MTU of 1500 bytes in Ethernet.

** Rings: Not all Problems are Hard  

- Let $n=2^k$, sample some small $g ∈ \ZZ[x]/(x^n+1)$.
- Consider the matrix $\vec{G}$ spanned by the coefficient vectors of $\{x^i \cdot g \bmod x^n+1\}$.
- Compute the Hermite normal form  $\vec{H} = \textnormal{HNF}(\vec{G})$.
- With good probability $g$ is a shortest vector of the lattice $L(\vec{H})$.

Finding $g$ takes polynomial time on a quantum computer.footfullcite:CamGroShe14,EC:CDPR15

** Rings: Not all Problems are as Hard

- What if $\ZZq[x]/P(x)$ has subfields?
- Distinguishing $h = f/g \in \ZZ_q[x]/P(x)$ from random for small $f$ and $g$ and big $q$ is easier than expected.footfullcite:EC:GenSzy02,EPRINT:AlbBaiDuc16

** Rings: No Known Attacks

There is *no known attack* which successfully exploits ring structure for properly chosen Ring-LWE parameters.

** CCA Security

- The schemes described here (and in the literature) promise IND-CPA security, i.e. security against chosen-plaintext attacks.
- They do not promise IND-CCA security, i.e. security against chosen-ciphertext attacks.
- Building efficient CCA secure schemes from LWE is still open.footfullcite:STOC:Peikert09

** Fin

   #+BEGIN_CENTER
\begin{Large}
\alert{Thank You}
\end{Large}
   #+END_CENTER


* Build Artefacts                                                     :noexport:

** Emacs Config

#+BEGIN_SRC emacs-lisp :tangle .dir-locals.el
((magit-mode .
             ((eval .
                    (and
                     (visual-line-mode 1)))))
 (org-mode .
           ((org-tags-column . -80)
            (eval .
                  (and
                   (flyspell-mode t)
                   (visual-fill-column-mode t))))))
#+END_SRC

** Makefile

#+BEGIN_SRC makefile :tangle Makefile
EMACS=emacs
EMACSFLAGS=--batch -l ~/.emacs.d/org-export-init.el
LATEXMK=latexmk
LATEXMKFLAGS=-xelatex

all: 20160615.-.LWE.Bletchley.Park.pdf

%.pdf: %.tex
	$(LATEXMK) $(LATEXMKFLAGS) $<

%.tex: %.org
	$(EMACS) $(EMACSFLAGS) $< -f org-latex-export-to-latex

clean:
	rm -f *.bbl *.aux *.out *.synctex.gz *.log *.run.xml *.blg *-blx.bib *.fdb_latexmk *.fls *.toc

.PHONY: clean all
.PRECIOUS: %.tex
#+END_SRC

** Autoexport to PDF

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (when (eq major-mode 'org-mode) (org-beamer-export-to-latex))) nil t)
# End:
