#+TITLE: The Approximate GCD Problem
#+SUBTITLE: A post-quantum problem that is easier to understand than RSA
#+DATE: 28 March 2018
#+AUTHOR: Martin R. Albrecht
#+STARTUP: beamer indent

#+OPTIONS: H:2 toc:t num:t todo:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: mbeamer
#+LATEX_HEADER: \usepackage{filecontents}
#+LATEX_HEADER: \usepackage{url}
#+LATEX_HEADER: \usefonttheme[onlymath]{serif}
#+LATEX_HEADER: \renewcommand{\vec}[1]{\ensuremath{\mathbf{#1}}\xspace}
#+LATEX_HEADER: \newcommand{\bigsoftO}[1]{\ensuremath{\tilde{\mathcal{O}}}\left({#1}\right)\xspace}
#+LATEX_HEADER: \setbeamercolor{example text}{fg=mDarkBrown}

#+BIBLIOGRAPHY: local.bib,abbrev3.bib,crypto_crossref.bib

* Greatest Common Divisors

** Euclidean algorithm

Given two integers $a, b < N = 2^κ$ the Euclidean algorithm computes their greatest common divisor $\gcd(a,b)$.

#+BEGIN_SRC python
def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)
#+END_SRC

The Euclidean algorithm runs in time $\bigO{κ^2}$.

Best known algorithm runs in time $\bigO{κ \log^2 κ \log\log κ}$. footfullcite:ANTS:SteZim04

For comparison, integer multiplication costs $\bigO{κ \log κ \log\log κ}$ using the Schönhage–Strassen algorithm.

* RSA

** Public key encryption

-  KeyGen :: Bob generates a key pair $(sk, pk)$ and publishes $pk$.

-  Enc :: Alice uses $pk$ to encrypt message $m$ for Bob as \(c\).

-  Dec :: Bob uses \(sk\) to decrypt \(c\) to recover \(m\).

** Naive RSA

- KeyGen :: The public key is $(N,e)$ and the private key is $d$, with

  - $N = p \cdot q$ where $p$ and $q$ prime,
  - $e$ coprime to $\phi(N) = (p-1)(q-1)$ and
  - $d$ such that $e \cdot d \equiv 1 \mod{\phi(N)}$.

- Enc :: $c \equiv m^e \bmod{N}$

- Dec :: $m \equiv c^d \equiv m^{e \cdot d} \equiv m^{1} \bmod{N}$
 
*** Caution

This naive version of RSA only achieves a very weak form of security — OW-CPA — even against classical adversaries: it is hard to recover random messages.

** Classical attacks on RSA

- An adversary who can factor large integers can break RSA.

- The best known classical algorithm for factoring is the Number Field Sieve (NFS)

- It has a *super-polynomial* but *sub-exponential* (in $\log N$ ) complexity of \[\bigO{e^{1.9 (\log^{1/3} N) (\log\log^{2/3}N)}}\] operations.


#+BEAMER: \pause

*** Caution

This does not mean an adversary _has_ to factor to solve RSA.

** Shared factors

What if two users generate moduli $N_0 = q_0 ⋅ p$ and $N_1 = q_1 \cdot p$, i.e. moduli with shared factors?

- We assume that factoring each of $N_0$ or $N_1$ is hard.
- On the other hand, computing $\gcd(N_0, N_1)$ reveals $p$ but costs only $\bigO{\kappa \log^2 \kappa \log \log \kappa}$ operations when $N_i \approx 2^\kappa$.

** Quantum attacks on RSA

An adversary with access to a quantum computer with \[ \bigO{\log^2(N) \log\log (N) \log\log\log (N)}\] gates can factor $N$ using Shor’s algorithm.footfullcite:FOCS:Shor94

* The Approximate GCD problem

** The Approximate GCD problem

The *Approximate GCD* problem is the problem of distinguishing \[x_i = q_i ⋅ p  \alert{+ r_i}\] from uniform $\ZZ ∩ [0, X)$ with $x_i < X$ (\(q_i\), \(r_i\) and \(p\) are secret).

** The Approximate GCD problem

\[x_i = q_i ⋅ p  + r_i\]

If $λ$ is our security parameter (think $λ=128$), then

| name | sizeof | DGHV10 footfullcite:EC:DGHV10 | CheSte15 footfullcite:EC:CheSte15 |
|------+--------+-------------------------------+-----------------------------------|
|  <r> |    <r> |                               |                                   |
|  $γ$ |  $x_i$ | $λ^5$                         | $λ \log λ$                        |
|  $η$ |    $p$ | $λ^2$                         | $λ + \log λ$                      |
|  $ρ$ |  $r_i$ | $λ$                           | $λ$                               |

** Naive encryption

- KeyGen :: The public key is $\{x_i = q_i ⋅ p + 2\,r_i\}_{0 ≤ i < t}$ and the private key is $p$.

- Enc :: For $m \in \{0,1\}$ output $c = m + \sum b_i ⋅ x_i$ with $b_i \sample \{0,1\}$.

- Dec :: $m = (c \bmod p) \bmod 2$.
 
#+BEAMER: \pause

*** Note

This encryption scheme is not IND-CCA secure but it is IND-CPA secure if the AGCD problem is hard.

* Attacks on the Approximate GCD problem

** Exhaustive search

Given $x_0 = q_0 ⋅ p + r_0$ and $x_1 = q_1 ⋅ p + r_1$ we know that \[p \mid \gcd\left((x_0 - r_0), (x_1 - r_1)\right)\]


Guess $r_0$ and $r_1$!

*** Cost

$2^{2ρ}$ GCDs

** Exhaustive search + multiplication

Compute \[\gcd\left(x_0', \prod_{i=0}^{2^ρ-1} (x_1 - i) \bmod x_0'\right)\] for all $x_0' = x_0 - j$ with $0 \leq j < 2^{ρ-1}$.

*** Cost

$2^ρ$ GCDs, $2^{2ρ}$ multiplications

** Time-Memory Trade Off

#+BEGIN_lemma
Assume that we have $τ$ samples $x_0 , … ,x_{τ-1}$ of a given prime $p$, of the hidden form $x_i = q_i ⋅ p + r_i$, then $p$ can then be recovered with overwhelming probability in time $\tilde{\mathcal{O}}(2^{\frac{τ+1}{τ-1}ρ})$. footfullcite:EC:CorNacTib12
#+END_lemma

** Lattice attacks

Given \(x_0  = q_0 p + r_0\) and \(x_1  = q_1 p + r_1\), consider

\begin{eqnarray*}
q_0 x_1 - q_1 x_0 & = & q_0 (q_1 p + r_1) - q_1 (q_0 p + r_0)\\
                  & = & q_0 q_1 p + q_0 r_1 - q_1 q_0 p - q_1 r_0\\
& = & q_0 r_1 - q_1 r_0
\end{eqnarray*}

and note that \[q_0 x_1 - q_1 x_0 \ll x_i\]

#+BEAMER: \pause

*** Non-starter?

We don’t know $q_i$!
** Lattice attacks

Consider the matrix 

\[\vec{B} = \begin{pmatrix}
2^{\rho + 1}  & x_1  & x_2   & \cdots  & x_t\\
              & -x_0 &       &         & \\
              &      &  -x_0 &         & \\
              &      &       &  \ddots & \\
              &      &       &         &  -x_0\\
\end{pmatrix}\]

multiplying on the left by the vector $\vec{q} = (q_0, q_1, q_2, \cdots, q_t)$ gives
\begin{align*}
\vec{v} &= (q_0, q_1, \cdots, q_t) \cdot \vec{B} \\
        &= (q_0\, 2^{ρ+1}, q_0 x_1 - q_1 x_0, \cdots, q_0 x_t - q_t x_0)\\
        &= (q_0\, \alert{2^{ρ+1}}, q_0 \alert{r_1} - q_1 \alert{r_0}, \cdots, q_0 \alert{r_t} - q_t \alert{r_0})
\end{align*}
which is a vector with small coefficients compared to $x_i$.

** Finding short vectors

The set of all integer-linear combinations of the rows of $\vec{B}$ the *lattice* spanned by (the rows of) $\vec{B}$.

- SVP :: finding a *shortest* non-zero vector on *general* lattices is NP-hard.

- Gap-SVP\(_\gamma\) :: Differentiating between instances of SVP in which the answer is at most 1 or larger than $\gamma$ on *general* lattices is a well-known and presumed quantum-hard problem for $\gamma$ polynomial in lattice dimension.

*** Easy SVP

GCD is SVP on $\ZZ^2$. For example, $\vec{B} = {[21, 14]}^T$, $\vec{v} = (-1,1)$, $\vec{v} ⋅\vec{B} = 7$.

** Reduction to presumed hard lattice problem

We can show that an adversary *has* to solve Gap-SVP.

*** AGCD → LWE                                                         :B_lemma:

If there is an algorithm efficiently solving the AGCD problem then there exists an algorithm which solves the _Learning with Errors_ (LWE) problem with essentially the same performance. footfullcite:EC:CheSte15 

*** LWE → Gap-SVP

If there is an algorithm efficiently solving the LWE problem then there exists a quantum algorithm which solves worst-case Gap-SVP instances.footfullcite:STOC:Regev05

** Learning with Errors (in normal form)

Given $(\vec{A},\vec{c})$ with $\vec{c} \in \ZZ_q^{m}$, $\vec{A} \in \ZZ_q^{m × n}$, small $\vec{s} \in \ZZ^{n}$ and small $\vec{e} \in \ZZ^{m}$ is

#+BEGIN_EXPORT LaTeX
\[
\left(\begin{array}{c}
\\
\\
\\ 
\vec{c} \\
\\
\\
\\
\end{array} \right) = \left(
\begin{array}{ccc}
\leftarrow & n & \rightarrow \\
\\
\\ 
& \vec{A} & \\
\\
\\
\\
\end{array} \right) \times \left( \begin{array}{c}
\\
\vec{s} \\
\\
\end{array} \right) + \left(
\begin{array}{c}
\\
\\
\\ 
\vec{e} \\
\\
\\
\\
\end{array} 
\right)
\]
#+END_EXPORT

or $\vec{c} \sample \mathcal{U}(\ZZ_q^{m})$.

** From vectors to scalars

LWE with modulus \(q^n\) and dimension \(1\) is as hard as LWE with modulus \(q\) and dimension \(1\).

\[q^{d-1} \cdot \Angle{\vec{a},\vec{s}} \approx \left(\sum_{i=0}^{n-1} q^{i} \cdot a_{i}\right) \cdot \left(\sum_{i=0}^{d-1} q^{d-i-1} \cdot s_{i}\right) \bmod q^{d} = \tilde{a} \cdot \tilde{s} \bmod q^{d}.\] 

*** Example

#+BEGIN_EXPORT latex
\begin{align*}
\left(a_0 + q\cdot a_1\right) \cdot \left(q \cdot s_0 + \cdot s_1\right) &= q(a_0\cdot s_0 + a_1 \cdot s_1) + (a_1 \cdot s_1) + q^2 (a_1 \cdot s_0)\\
&\equiv q(a_0\cdot s_0 + a_1 \cdot s_1) + (a_1 \cdot s_1) \bmod q^2\\
&\approx q(a_0\cdot s_0 + a_1 \cdot s_1) \bmod q^2
\end{align*}
#+END_EXPORT



** Fin
:PROPERTIES:
:BEAMER_OPT: standout
:END:

#+BEGIN_CENTER
 [[./kitten-01.jpg]]

*@@beamer:\Large@@ Questions?*
#+END_CENTER

* Bonus

** Homomorphic encryption

Given $c_i = q_i ⋅ p + m_i'$ with $m_i' = 2\,r_i + m_i$.
- We can compute \[c' = c_0 ⋅ c_1 = q_0 q_1 p^2 + q_0 m_1' p  + q_1 m_0' p + m_0' ⋅ m_1'\] to get \(c' \bmod p =  m_0' ⋅ m_1'\) and \( m_0' ⋅ m_1' \bmod 2 = m_0 ⋅ m_1\).
- We can also compute \[c' = c_0 + c_1 = (q_0 + q_1) p + (m_0' + m_1')\] to get $c' \bmod p \bmod 2 = m_0 \oplus m_1$.

We can compute with encrypted data.[fn:4]

* Footnotes

[fn:1] https://blog.cloudflare.com/lavarand-in-production-the-nitty-gritty-technical-details/ 

[fn:2] https://factorable.net/fastgcd-1.0.tar.gz

[fn:4] https://crypto.stanford.edu/craig/easy-fhe.pdf

* Build Artefacts                                                     :noexport:
** Emacs Config

#+BEGIN_SRC emacs-lisp :tangle .dir-locals.el
((magit-mode .
             ((eval .
                    (and
                     (visual-line-mode 1)))))
 (bibtex-mode . ((fill-column . 10000)))
 (org-mode .
           ((org-tags-column . -80)
            (eval .
                  (and
                   (flyspell-mode t)
                   (visual-fill-column-mode t))))))
#+END_SRC

** Makefile

#+BEGIN_SRC makefile :tangle Makefile
EMACS=emacs
EMACSFLAGS=--batch -l ~/.emacs.d/org-export-init.el
LATEXMK=latexmk
LATEXMKFLAGS=-xelatex

%.pdf: %.tex talk-header.tex
$(LATEXMK) $(LATEXMKFLAGS) $<

%.tex: %.org
$(EMACS) $(EMACSFLAGS) $< -f org-latex-export-to-latex

clean:
rm -f *.bbl *.aux *.out *.synctex.gz *.log *.run.xml *.blg *-blx.bib *.fdb_latexmk *.fls *.toc

.PHONY: clean all
.PRECIOUS: %.tex
#+END_SRC

** Autoexport to PDF

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (when (eq major-mode 'org-mode) (org-beamer-export-to-latex))) nil t)
# End:

