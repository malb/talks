#+TITLE: LWE and Encryption
#+SUBTITLE: Indian Workshop on Post-Quantum Cryptography
#+LaTeX_CLASS_OPTIONS: [xcolor=table,10pt,aspectratio=169]
#+OPTIONS: H:2 toc:t num:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: mbeamer
#+PROPERTY: header-args:sage :tolatex lambda obj: r'(%s)' % latex(obj) :results raw

#+LATEX_HEADER: \newcommand{\Ldis}{\ensuremath{\mathcal{L}_{\mathbf{s},\chi}}\xspace}
#+LATEX_HEADER: \newcommand{\rhf}{{\ensuremath{\sqrt{\alpha_{\beta}}}\xspace}}
#+LATEX_HEADER: \DeclareMathOperator{\Vol}{Vol}
#+LATEX_HEADER: \renewcommand{\vec}[1]{\ensuremath{\mathbf{#1}}\xspace}
#+LATEX_HEADER: \renewcommand{\norm}[1]{\left\lVert#1\right\rVert}
#+LATEX_HEADER: \newcommand{\mat}[1]{\ensuremath{\vec{#1}}\xspace}

#+AUTHOR: Martin R. Albrecht
#+EMAIL: martin.albrecht@royalholloway.ac.uk
#+DATE: 18 November 2020
#+STARTUP: beamer
#+BIBLIOGRAPHY: local.bib,abbrev3.bib,crypto_crossref.bib,rfc.bib,jacm.bib,dcc.bib

* LWE

** 1-dim LWE (even easier than RSA)

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.4
:END:

_KeyGen_

- Pick an integer \(q \approx 2^{10000}\)
- Pick a random integer \(s \in \ZZ_q\)
- Pick about \(t=20000\) random \(a_i \in \ZZ_q\) and \(e_i \approx 2^{9990}\)
- Publish pairs \(a_i, c_i = a_i \cdot s + e_i \bmod \ZZ_q\)

_Encrypt_  \(m \in \{0,1\}\)

- Pick \(b_i \in \{-1,0,1\}\)
- \(d_0 = \sum_{i=0}^{t-1} b_i \cdot a_i\)
- \(d_1 = q/2\cdot m + \sum_{i=0}^{t-1} b_i \cdot c_i\)  
- Return \(d_0, d_1\)

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.6
:END:

_Decrypt_

- Compute \(d = d_1 - d_0 \cdot s\)
  #+begin_export latex
\begin{align*}
  &= q/2\cdot m + \sum_{i=0}^{t-1} b_i \cdot c_i - \sum_{i=0}^{t-1} b_i \cdot a_i \cdot s\\
  &= q/2\cdot m + \sum_{i=0}^{t-1} b_i \cdot (a_i \cdot s + e_i) - \sum_{i=0}^{t-1} b_i \cdot a_i \cdot s\\
  &= q/2\cdot m + \sum_{i=0}^{t-1} b_i \cdot  e_i 
\end{align*}
  #+end_export
- Return 1 if \(d\) is closer to \(q/2\) than zero and 0 otherwise.

** The Learning with Errors Problem (LWE)

Given $(\vec{A},\vec{c})$ with $\vec{c} \in \ZZ_q^{m}$, $\vec{A} \in \ZZ_q^{m \times n}$, $\vec{s} \in \ZZ_q^{n}$ and *small $\vec{e} \in \ZZ^{m}$* is

#+begin_export latex
\begin{align*}
\left(\begin{array}{c}
\\
\\
\\ 
\vec{c} \\
\\
\\
\\
\end{array} \right) = \left(
\begin{array}{ccc}
\leftarrow & n & \rightarrow \\
\\
\\ 
& \vec{A} & \\
\\
\\
\\
\end{array} \right) \times \left( \begin{array}{c}
\\
\vec{s} \\
\\
\end{array} \right) \alert{+ \left(
\begin{array}{c}
\\
\\
\\ 
\vec{e} \\
\\
\\
\\
\end{array} 
\right)}
\end{align*}
#+end_export

or $\vec{c} \sample \mathcal{U}\left(\ZZ_q^{m}\right)$.

** The Learning with Errors Problem (LWE)

#+begin_definition 
Let \(n,\,q\) be positive integers, \(\chi\) be a probability distribution on $\ZZ$ and $\vec{s}$ be a uniformly random vector in \(\ZZ_q^n\). We denote by \(\Ldis\) the probability distribution on \(\ZZ_q^n \times \ZZ_q\) obtained by choosing \(\vec{a} \in \ZZ_q^n\) uniformly at random, choosing \(e \in \ZZ\) according to \(\chi\) and considering it in \(\ZZ_q\), and returning  \((\vec{a},c) = (\vec{a},\langle \vec{a},\vec{s} \rangle+ e) \in \ZZ_q^n \times \ZZ_q\).

- Decision-LWE :: is the problem of deciding whether pairs \((\vec{a}, c) \in \ZZ_q^n \times \ZZ_q\) are sampled according to \(\Ldis\) or the uniform distribution on \(\ZZ_q^n \times \ZZ_q\).

- Search-LWE :: is the problem of recovering \(\vec{s}\) from pairs \((\vec{a}, c)=(\vec{a},\langle  \vec{a},\vec{s}\rangle + e) \in \ZZ_q^n \times \ZZ_q\) sampled according to \(\Ldis\).
#+end_definition

fullcite:Regev:2009:LLE

** A Fair Warning

*** Gaussian Distributions                                                                                :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:

In this talk I am ignoring the specifics of the distribution \(\chi\). That is, the only slide with the phrase "Discrete Gaussian distribution" is this slide.

In practice, _for encryption_ the shape of the error does not seem to matter much.

Also, ignoring the distribution allows to brutally simply proof sketches: almost all technical difficulty in these proofs derives from arguing about two distributions being close.

** Normal Form LWE

- Consider \(\mat{A} \in \ZZ_q^{2n \times n}\), with \(\mat{A}^T = \left[\mat{A}_0^T \mid \mat{A}_1^T\right]\), \(\vec{s} \in \ZZ_q^n\), \(\vec{e} \sample \chi^m\) with \(\vec{e}^T = \left(\vec{e}_0^T \mid \vec{e}_1^T\right)\)

- We have \(\vec{c}_0 = \mat{A}_0 \cdot \vec{s} + \vec{e}_0\) and \(\vec{c}_1 = \vec{A}_1 \cdot \vec{s} + \vec{e}_1\)

- We also have
  #+begin_export latex
\begin{align*}
\vec{c}' &= \vec{c}_1 - \mat{A}_1 \cdot \mat{A}_0^{-1} \cdot \vec{c}_0\\
   &= \vec{A}_1\cdot \vec{s} + \vec{e}_1 -  \mat{A}_1 \cdot \mat{A}_0^{-1} (\mat{A}_0 \cdot \vec{s} + \vec{e}_0)\\
   &= \vec{A}_1\cdot \vec{s} + \vec{e}_1 -  \mat{A}_1 \cdot \vec{s} -  \mat{A}_1 \cdot \mat{A}_0^{-1} \cdot \vec{e}_0\\
   &= - \mat{A}_1 \cdot \mat{A}_0^{-1} \cdot \vec{e}_0 + \vec{e}_1\\
   &= \mat{A}' \cdot \vec{e}_0 + \vec{e}_1
\end{align*}
  #+end_export

*** cite:C:ACPS09

We might as well assume that our secret is also sampled from \(\chi\).

** Dimension/Modulus Trade-Off

Consider \(\vec{a}, \vec{s} \in \mathbb{Z}_{q}^{d}\) where \(\vec{s}\) is small, then
\[q^{d-1} \cdot \langle{\vec{a},\vec{s}}\rangle \approx \left(\sum_{i=0}^{d-1} q^{i} \cdot a_{i}\right) \cdot \left(\sum_{i=0}^{d-1} q^{d-i-1} \cdot s_{i}\right) \bmod q^{d} = \tilde{a} \cdot \tilde{s} \bmod q^{d}.\]
Thus, if there exists an efficient algorithm solving the problem in \(\ZZ_{q^d}\), we can use it to solve the problem in \(\mathbb{Z}_{q}^d\). 

***  \(\ZZ_{q^{2}}\)
:PROPERTIES:
:BEAMER_env: example
:END:

#+begin_export latex
\[q\cdot \left(a_{0}\cdot s_{0} + a_{1} \cdot s_{1}\right) + a_{0} \cdot s_{1} + q^{2} \cdot a_{1} \cdot s_{0} \bmod q = \left(a_{0} + q\cdot a_{1}\right) \cdot (q\cdot s_{0} + s_{1})\]
#+end_export

***                                                                                                    :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

fullcite:STOC:BLPRS13

* LWE and Lattices

** Lattices
:PROPERTIES:
:BEAMER_OPT: fragile
:END:

*** 
:PROPERTIES:
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

- A lattice is a discrete subgroup of $\RR^d$
- It can be written as $\Lambda = \{\sum_{i=0}^{d-1} v_i \cdot \vec{b}_i \mid v_i \in \ZZ\}$ for some basis vectors \(\vec{b}_i\).
- We write \(\Lambda(\mat{L})\) for the lattices spanned by the columns of \(\mat{L}\).
- A lattice is \(q\)-ary if it contains \(q\,\ZZ^{d}\), e.g. \(\{\vec{x} \in \ZZ_{q}^{d} \mid \vec{x} \cdot \vec{A} \equiv \vec{0}\}\) for some \(\vec{A} \in \ZZ^{d \times d'}\).  

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+begin_export latex
\tikzset{external/export=true}
\begin{tikzpicture}

  \begin{scope}[scale=.6]
    \coordinate (Origin)   at (0,0);
    \coordinate (XAxisMin) at (-5,0);
    \coordinate (XAxisMax) at (5,0);
    \coordinate (YAxisMin) at (0,-5);
    \coordinate (YAxisMax) at (0,5);
    \draw [thin, black!40, <->] (XAxisMin) -- (XAxisMax);% Draw x axis
    \draw [thin, black!40,<->] (YAxisMin) -- (YAxisMax);% Draw y axis
    %\draw[style=help lines,dashed,black!20] (-5,-5) grid[step=1cm] (5,5);

    \begin{scope}
      \clip (-5,-5) rectangle (5,5); % Clips the picture...
      \pgftransformcm{1}{0.6}{0.7}{1}{\pgfpoint{0cm}{0cm}}

      % setup the nodes
      \foreach \x in {-15,...,15}
      \foreach \y in {-15,...,15}
      {
        \node[shape=circle,fill=black!45,scale=0.35] (\x-\y) at (2*\x,\y+3){};
      }
    \end{scope}
  \end{scope}

\end{tikzpicture}
\tikzset{external/export=false}

\tiny Picture credit: David Wong
#+end_export

** Shortest Vector Problem
:PROPERTIES:
:BEAMER_OPT: fragile
:END:

*** 
:PROPERTIES:
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+begin_definition
Given a lattice basis \(\mat{B}\), find a shortest non-zero vector in \(\Lambda(\mat{B})\).
#+end_definition

- The most natural problem on lattices
- We write \(\lambda_{1}(\Lambda)\) for the Euclidean norm of a shortest vector.
- NP-hard to solve exactly
- Cryptography relies on approximate variants without such a reduction  

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:


#+begin_export latex
\tikzset{external/export=true}
\begin{tikzpicture}
  \begin{scope}[scale=.6]
    \coordinate (Origin)   at (0,0);
    \coordinate (XAxisMin) at (-5,0);
    \coordinate (XAxisMax) at (5,0);
    \coordinate (YAxisMin) at (0,-5);
    \coordinate (YAxisMax) at (0,5);
    \draw [thin, black!40, <->] (XAxisMin) -- (XAxisMax);% Draw x axis
    \draw [thin, black!40,<->] (YAxisMin) -- (YAxisMax);% Draw y axis
    \draw [thin, purple,->] (0,0) -- (-.5,.7);
    % \draw[style=help lines,dashed,black!20] (-5,-5) grid[step=1cm] (5,5);

    \begin{scope}
      \clip (-5,-5) rectangle (5,5); % Clips the picture...
      \pgftransformcm{1}{0.6}{0.7}{1}{\pgfpoint{0cm}{0cm}}

      % setup the nodes
      \foreach \x in {-15,...,15}
      \foreach \y in {-15,...,15}
      {
        \node[shape=circle,fill=black!45,scale=0.35] (\x-\y) at (2*\x,\y+3){};
      }
    \end{scope}
    % our little node
    \node[shape=circle,fill=purple,scale=0.35] at (-.6,.8){};
  \end{scope}

\end{tikzpicture}
\tikzset{external/export=false}

\tiny Picture credit: David Wong
#+end_export

** Bounded Distance Decoding

*** 
:PROPERTIES:
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+begin_definition
Given a lattice basis \(\mat{B}\), a vector \( \vec{t} \), and a parameter \( 0 < \alpha\) such that the Euclidean distance \textnormal{dist}\((\vec{t},\vec{B}) < \alpha \cdot \lambda_{1}(\Lambda(\vec{B})) \), find the lattice vector \(\vec{v} \in \Lambda(\vec{B}) \) which is closest to \( \vec{t} \).
#+end_definition

- When \(\alpha < 1/2\) unique decoding is guaranteed but for \(\alpha < 1\) we typically still expect unique decoding.
- BDD is a special case of the Closest Vector Problem where there is no bound on the distance to the lattice.

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+begin_export latex
\tikzset{external/export=true}
\begin{tikzpicture}

  \begin{scope}[scale=.6,shift={(12,0)}]
    \coordinate (Origin)   at (0,0);
    \coordinate (XAxisMin) at (-5,0);
    \coordinate (XAxisMax) at (5,0);
    \coordinate (YAxisMin) at (0,-5);
    \coordinate (YAxisMax) at (0,5);
    \draw [thin, black!40, <->] (XAxisMin) -- (XAxisMax);% Draw x axis
    \draw [thin, black!40,<->] (YAxisMin) -- (YAxisMax);% Draw y axis
    % \draw[style=help lines,dashed,black!20] (-5,-5) grid[step=1cm] (5,5);


    \begin{scope}
      \clip (-5,-5) rectangle (5,5); % Clips the picture...
      \pgftransformcm{1}{0.6}{0.7}{1}{\pgfpoint{0cm}{0cm}}

      % setup the nodes
      \foreach \x in {-15,...,15}
      \foreach \y in {-15,...,15}
      {
        \node[shape=circle,fill=black!45,scale=0.35] (\x-\y) at (2*\x,\y+3){};
      }
    \end{scope}

    % our little node
    \node[shape=circle,fill=purple!60,scale=0.4] at (2.5,3.4){};
    \node[shape=circle,fill=purple,scale=0.4] at (2.1,3){};
    \node[shape=circle,fill=none,draw=purple,scale=0.8] at (2.1,3){};

  \end{scope}

\end{tikzpicture}
\tikzset{external/export=false}

\tiny Picture credit: David Wong
#+end_export

** LWE _is_ Bounded Distance Decoding (BDD) on Random \(q\)-ary Lattices

Let
#+begin_export latex
\[
\mat{L} =  \begin{pmatrix}
    q\mat{I} & \mat{A}\\
    0 & \mat{I}\\
  \end{pmatrix}
\]
#+end_export
We can reformulate the matrix form of the LWE equation \(\vec{A} \cdot \vec{s} + \vec{e} \equiv \vec{c} \bmod q\) as a linear system over the Integers as:
#+begin_export latex
\[
  \mat{L} \cdot
  \begin{pmatrix}
    \vec{*}\\
    \vec{s}
  \end{pmatrix} +
  \begin{pmatrix}
    \vec{e}\\
    -\vec{s}
  \end{pmatrix}  
 = 
  \begin{pmatrix}
    q\mat{I} & -\mat{A}\\
    0 & \mat{I}\\
  \end{pmatrix} \cdot
  \begin{pmatrix}
    \vec{*}\\
    \vec{s}
  \end{pmatrix} +
  \begin{pmatrix}
    \vec{e}\\
    -\vec{s}
  \end{pmatrix}  
= 
  \begin{pmatrix}
    \vec{c}\\
    \vec{0}
  \end{pmatrix}
\]
#+end_export

The vector \((\vec{c}^T, \vec{0}^T)^T\) is close to the lattice \(\Lambda\left(\mat{L}\right)\) with offset \((\vec{e}^T, -\vec{s}^T)^T\).


** Is that a Good Choice?

- Maybe BDD on random \(q\)-ary lattices is easier than BDD in general?
- Maybe BDD is easier than SVP?

** Sketch: BDD on Random \(q\)-ary Lattices solves BDD on any Lattice

- We are given some basis \(\mat{B} \in \ZZ^{d \times d}\) and some target \(\vec{t}\) s.t. \(\vec{t} = \mat{B}\cdot \vec{s} + \vec{e}\) with \(\vec{e}\) small
- Pick some large \(q \geq 2^{2d}\) 
- Sample some \(\mat{U}\) (see below)
- Set \(\mat{A} = \mat{U}\cdot \mat{B} \bmod q\) and consider \(\vec{c} = \mat{U} \cdot \vec{t} + \vec{e}'\) with \({\vec{e}'}\) small
  #+begin_export latex
\begin{align*}
\vec{c} &= \mat{U} \cdot \vec{t} + \vec{e}' = \mat{U} \cdot \left(\mat{B}\cdot \vec{s} + \vec{e} \right) + \vec{e}' = \mat{U} \cdot \mat{B}\cdot \vec{s} + \mat{U} \cdot \vec{e} + \vec{e}' = \mat{A} \cdot \vec{s} + \vec{e}''
\end{align*}
  #+end_export
- We can pick \(\mat{U}\)
  + large enough to make \(\mat{A}\) uniform mod \(q\) and
  + small enough to make \(\mat{U} \cdot \vec{e} + \vec{e}'\) small and well distributed
  using "smoothing parameter" arguments on \(\Lambda(\mat{B}^{-T})\)

fullcite:Regev:2009:LLE



** Sketch: Solving BDD on any Lattice implies solving GapSVP

Say we want to decide if \(\lambda_{1}(\Lambda) \leq 1\) or \(\lambda_{1}(\Lambda) > \gamma\) and we have a BDD solver with \(\alpha = c\cdot \gamma\).

- Pick a random \(\vec{z} \in \Lambda\), add a small error \(\vec{e}\) of norm \(c\cdot \gamma\)
- Run the BDD solver.
- If it returns \(\vec{z}\) then output \(\lambda_{1}(\Lambda) > \gamma\), else output \(\lambda_{1}(\Lambda) \leq 1\).

fullcite:STOC:Peikert09

*** 

Regev showed: If you have a BDD solver you can find a short basis on a quantum computer

fullcite:Regev:2009:LLE

** Concrete Hardness: Cryptanalysis

- This tells us random \(q\)-ary lattices are not a terrible choice
- To establish how long it actually takes to solve LWE, we rely on cryptanalysis
  #+begin_src sage :dir /home/malb/Projects/lwe/estimator :results output :tolatex lambda obj: r'(%s)' % obj
load("estimator.py")
primal_usvp(n=768, q=2^13, alpha=2^-11, reduction_cost_model=BKZ.ADPS16)
#+end_src
  #+RESULTS:
  (rop: 2^183.4, red: 2^183.4, delta_0: 1.002888, beta:  628, d: 1504, m: 735)

fullcite:JMC:AlbPlaSco15

* Variants

** LWE

#+begin_export latex
\[
\begin{pmatrix}c_{0} \\ c_{1} \\ c_{2} \\ c_{3} \\ c_{4} \\ c_{5} \\ c_{6} \\ c_{7}\end{pmatrix} = 
\begin{pmatrix}
a_{0,0} & a_{0,1} & a_{0,2} & a_{0,3} & a_{0,4} & a_{0,5} & a_{0,6} & a_{0,7}\\
a_{1,0} & a_{1,1} & a_{1,2} & a_{1,3} & a_{1,4} & a_{1,5} & a_{1,6} & a_{1,7}\\
a_{2,0} & a_{2,1} & a_{2,2} & a_{2,3} & a_{2,4} & a_{2,5} & a_{2,6} & a_{2,7}\\
a_{3,0} & a_{3,1} & a_{3,2} & a_{3,3} & a_{3,4} & a_{3,5} & a_{3,6} & a_{3,7}\\
a_{4,0} & a_{4,1} & a_{4,2} & a_{4,3} & a_{4,4} & a_{4,5} & a_{4,6} & a_{4,7}\\
a_{5,0} & a_{5,1} & a_{5,2} & a_{5,3} & a_{5,4} & a_{5,5} & a_{5,6} & a_{5,7}\\
a_{6,0} & a_{6,1} & a_{6,2} & a_{6,3} & a_{6,4} & a_{6,5} & a_{6,6} & a_{6,7}\\
a_{7,0} & a_{7,1} & a_{7,2} & a_{7,3} & a_{7,4} & a_{7,5} & a_{7,6} & a_{7,7}\\
\end{pmatrix} \cdot
\begin{pmatrix}s_{0} \\ s_{1} \\ s_{2} \\ s_{3} \\ s_{4} \\ s_{5} \\ s_{6} \\ s_{7}\end{pmatrix} +
\begin{pmatrix}e_{0} \\ e_{1} \\ e_{2} \\ e_{3} \\ e_{4} \\ e_{5} \\ e_{6} \\ e_{7}\end{pmatrix}
\]
#+end_export

*** Performance

Storage: \(\mathcal{O}(n^{2})\); Computation \(\mathcal{O}(n^{2})\)

** Ring-LWE/Polynomial-LWE

#+begin_src jupyter-python :kernel sagemath :results raw :exports none
P = PolynomialRing(QQ, 3*8, ["a_%d"%i for i in range(8)] + ["s_%d"%i for i in range(8)] + ["e_%d"%i for i in range(8)])
a = P.gens()[0:8]
s = P.gens()[8:16]
e = P.gens()[16:24]
R.<X> = PolynomialRing(P)
F = X^8 + 1
a = sum(a[i]*X^i for i in range(8))
s = sum(s[i]*X^i for i in range(8))
e = sum(e[i]*X^i for i in range(8))
A = matrix([((X^i*a) % F).list() for i in range(8)]).T
# print((A*vector(s) + vector(e))[2])
# print(((a*s + e) % f)[2])
latex(A)
#+end_src

#+begin_export latex
\[
\begin{pmatrix}c_{0} \\ c_{1} \\ c_{2} \\ c_{3} \\ c_{4} \\ c_{5} \\ c_{6} \\ c_{7}\end{pmatrix} = 
\begin{pmatrix}
\alert{a_{0}} & -a_{7} & -a_{6} & -a_{5} & -a_{4} & -a_{3} & -a_{2} & -a_{1} \\
\alert{a_{1}} & a_{0} & -a_{7} & -a_{6} & -a_{5} & -a_{4} & -a_{3} & -a_{2} \\
\alert{a_{2}} & a_{1} & a_{0} & -a_{7} & -a_{6} & -a_{5} & -a_{4} & -a_{3} \\
\alert{a_{3}} & a_{2} & a_{1} & a_{0} & -a_{7} & -a_{6} & -a_{5} & -a_{4} \\
\alert{a_{4}} & a_{3} & a_{2} & a_{1} & a_{0} & -a_{7} & -a_{6} & -a_{5} \\
\alert{a_{5}} & a_{4} & a_{3} & a_{2} & a_{1} & a_{0} & -a_{7} & -a_{6} \\
\alert{a_{6}} & a_{5} & a_{4} & a_{3} & a_{2} & a_{1} & a_{0} & -a_{7} \\
\alert{a_{7}} & a_{6} & a_{5} & a_{4} & a_{3} & a_{2} & a_{1} & a_{0}
\end{pmatrix}\cdot
\begin{pmatrix}s_{0} \\ s_{1} \\ s_{2} \\ s_{3} \\ s_{4} \\ s_{5} \\ s_{6} \\ s_{7}\end{pmatrix} +
\begin{pmatrix}e_{0} \\ e_{1} \\ e_{2} \\ e_{3} \\ e_{4} \\ e_{5} \\ e_{6} \\ e_{7}\end{pmatrix}
\]
#+end_export

** Ring-LWE/Polynomial-LWE

#+begin_export latex
\begin{align*}
\sum_{i=0}^{n-1} c_{i} \cdot X^{i} &= \left(\sum_{i=0}^{n-1} a_{i} \cdot X^{i}\right) \cdot \left(\sum_{i=0}^{n-1} s_{i} \cdot X^{i}\right) + \sum_{i=0}^{8} e_{i} \cdot X^{i} \bmod X^{n} +1\\
c(X) &= a(X) \cdot s(X) + e(X) \bmod \phi(X)
\end{align*}
#+end_export

*** Performance (\(n\) is a power of two)

Storage: \(\mathcal{O}(n)\); Computation \(\mathcal{O}(n \log n)\)

***                                                                                                    :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

fullcite:EC:LyuPeiReg10

** Module-LWE

#+begin_src jupyter-python :kernel sagemath :results raw :exports none
P = PolynomialRing(QQ, 3*4, ["a_%d"%i for i in range(4)] + ["s_%d"%i for i in range(4)] + ["e_%d"%i for i in range(4)])
a = P.gens()[0:4]
s = P.gens()[4:8]
e = P.gens()[8:12]
R.<X> = PolynomialRing(P)
F = X^4 + 1
a = sum(a[i]*X^i for i in range(4))
s = sum(s[i]*X^i for i in range(4))
e = sum(e[i]*X^i for i in range(4))
A = matrix([((X^i*a) % F).list() for i in range(4)]).T
# print((A*vector(s) + vector(e))[2])
# print(((a*s + e) % f)[2])
latex(A)
#+end_src


#+begin_export latex
\[
\begin{pmatrix}c_{0,0} \\ c_{0,1} \\ c_{0,2} \\ c_{0,3} \\ c_{1,0} \\ c_{1,1} \\ c_{1,2} \\ c_{1,3}\end{pmatrix} = 
\left(\begin{array}{rrrr|rrrr}
\alert{a_{0,0}} & -a_{0,3} & -a_{0,2} & -a_{0,1} & \alert{a_{1,0}} & -a_{1,3} & -a_{1,2} & -a_{1,1} \\
\alert{a_{0,1}} &  a_{0,0} & -a_{0,3} & -a_{0,2} & \alert{a_{1,1}} &  a_{1,0} & -a_{1,3} & -a_{1,2} \\
\alert{a_{0,2}} &  a_{0,1} &  a_{0,0} & -a_{0,3} & \alert{a_{1,2}} &  a_{1,1} &  a_{1,0} & -a_{1,3} \\
\alert{a_{0,3}} &  a_{0,2} &  a_{0,1} &  a_{0,0} & \alert{a_{1,3}} &  a_{1,2} &  a_{1,1} &  a_{1,0} \\
\hline
\alert{a_{2,0}} & -a_{2,3} & -a_{2,2} & -a_{2,1} & \alert{a_{3,0}} & -a_{3,3} & -a_{3,2} & -a_{3,1} \\
\alert{a_{2,1}} &  a_{2,0} & -a_{2,3} & -a_{2,2} & \alert{a_{3,1}} &  a_{3,0} & -a_{3,3} & -a_{3,2} \\
\alert{a_{2,2}} &  a_{2,1} &  a_{2,0} & -a_{2,3} & \alert{a_{3,2}} &  a_{3,1} &  a_{3,0} & -a_{3,3} \\
\alert{a_{2,3}} &  a_{2,2} &  a_{2,1} &  a_{2,0} & \alert{a_{3,3}} &  a_{3,2} &  a_{3,1} &  a_{3,0} \\
\end{array}\right)\cdot
\begin{pmatrix}s_{0} \\ s_{1} \\ s_{2} \\ s_{3} \\ s_{4} \\ s_{5} \\ s_{6} \\ s_{7}\end{pmatrix} +
\begin{pmatrix}e_{0} \\ e_{1} \\ e_{2} \\ e_{3} \\ e_{4} \\ e_{5} \\ e_{6} \\ e_{7}\end{pmatrix}
\]
#+end_export

** Module-LWE

#+begin_export latex
\[
\begin{pmatrix} c_{0}(X) \\ c_{1}(X) \end{pmatrix} =
\begin{pmatrix} a_{0}(X) & a_{1}(X) \\ a_{2}(X) & a_{3}(X) \end{pmatrix} \cdot
\begin{pmatrix} s_{0}(X) \\ s_{1}(X) \end{pmatrix} +
\begin{pmatrix} e_{0}(X) \\ e_{1}(X) \end{pmatrix}
\]
#+end_export

*** Performance (\(n\) is a power of two)

Storage: \(\mathcal{O}(k^{2} \cdot n)\); Computation \(\mathcal{O}(k^{2} \cdot n \log n)\)
***                                                                                                    :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

fullcite:Langlois:2015:WCA

** LWR

Instead of "wiping" the lower-order bits of \(\vec{c}_{i} = \mat{A} \cdot \vec{s}\) by adding \(\vec{e}_{i}\), throw them away
- More formally, output \[ \left\lfloor{\frac{p}{q} \cdot  (\mat{A} \cdot \vec{s})} \right\rceil \]  for some \(p < q\).
- This is no easier than LWE if  \[ \left\lfloor{\frac{p}{q} \cdot  (\mat{A} \cdot \vec{s})} \right\rceil =    \left\lfloor{\frac{p}{q} \cdot  (\mat{A} \cdot \vec{s} + \vec{e})} \right\rceil  \] 
- Can be quite fast if \(p,q\) are powers of two, saves bandwidth

fullcite:EC:BanPeiRos12  
  
* LWE Encryption

** Convention

- I am going to use the Ring-LWE formulation \[c_{i}(X) = a_{i}(X)\cdot s(X) + e_{i}(X)\]
  Thus, each sample corresponds to "\(n\) LWE samples"
- I will suppress the "\((X)\)" in "\(a(X)\)" etc.
- I will assume \(s\) is "small" and that the product of two "small" things is "small".
- I will write \(\alert{e_{i}}\) to emphasise that \(e_{i}\) is small.

*** TL;DR: I will write
 \[c_{i} = a_{i}\cdot \alert{s} + \alert{e_{i}}\]

** DH to Ring-LWE Dictionary

| DH Land                        | Ring-LWE Land                                                 |
|--------------------------------+---------------------------------------------------------------|
| \(g\)                          | \(a\)                                                         |
| \(g^x\)                        | \(a\cdot {s} + \alert{e}\)                                                    |
|                                |                                                               |
| \(g^x \cdot g^y = g^{x+y}\)    | \((a\cdot {s} + \alert{e_0}) + (a \cdot {t} + \alert{e_1}) = a \cdot {(s+t)} + \alert{e'}\)                   |
|                                |                                                               |
| \((g^a)^b = (g^b)^a\)          | \((a\cdot \alert{s} + \alert{e})\cdot \alert{t} = (a\cdot \alert{s} \cdot \alert{t} + \alert{e} \cdot \alert{t})\) |
|                                | \(\approx a\cdot \alert{s} \cdot \alert{t} \approx (a\cdot \alert{t} + \alert{e})\cdot \alert{s}\) |
|                                |                                                               |
| \((g, g^a, g^b, g^{ab})\)      | \((a,\ a\cdot \alert{s} + \alert{e},\ a\cdot \alert{t} + \alert{d},\ a \cdot \alert{s} \cdot \alert{t} + \alert{e'})\) |
| \(\approx_c (g, g^a, g^b, u)\) | \(\approx_c (a,\ a\cdot \alert{s} + \alert{e},\ a\cdot \alert{t} + \alert{d},\ u)\) |

 
** Regev

You have already seen it.

- KeyGen :: Publish \(c_{i} = a_{i} \cdot s + \alert{e_{i}}\) for \(i=0,\ldots, \lceil 2\, n \log q\rceil\)
- Encrypt :: \[d_{0} = \sum \alert{b_{i}} \cdot a_{i},\quad  d_{1} = \left(\sum \alert{b_{i}} \cdot c_{i} \right) + q/2 \cdot m  \textnormal{ with } \alert{b_{i}} \in \bin, m \in \bin^{n}\]
- Decrypt ::
  #+begin_export latex
\begin{align*}
\left\lfloor \frac{2}{q} \cdot \left(d_{1} - d_{0} \cdot s\right) \right\rceil &= \left\lfloor \frac{2}{q} \cdot \left(\left(\sum \alert{b_{i}} \cdot c_{i} \right) + \frac{q}{2} \cdot m - \sum \alert{b_{i}} \cdot a_{i} \cdot s\right) \right\rceil\\
&= \left\lfloor \frac{2}{q} \cdot \left(\left(\sum \alert{b_{i}} \cdot (a_{i} \cdot s + \alert{e_{i}}) \right) + \frac{q}{2} \cdot m - \sum \alert{b_{i}} \cdot a_{i} \cdot s\right) \right\rceil\\
&= \left\lfloor \frac{2}{q} \cdot \left(\left(\sum \alert{b_{i} \cdot e_{i}} \right) + \frac{q}{2} \cdot m \right) \right\rceil = m
\end{align*}
  #+end_export

The public key is indistinguishable from uniform by the LWE assumption and \(\sum b_{i} \cdot a_{i}\) is statistically close to uniformly random by the Leftover Hash Lemma (LHL).

** ElGamal & LPR10

_ElGamal_

- KeyGen :: \(h = g^{x}\)
- Encrypt :: \(d_{0},\ d_{1} = \left({g^{r},\  m \cdot h^{r}}\right)\) for some random \(r\)
- Decrypt :: \(d_{1} / d_{0}^{x} = m \cdot (g^{x})^{r} / (g^{r})^{x} = m\)

_[[cite:EC:LyuPeiReg10]]_[fn:1]

- KeyGen :: \(c = a \cdot \alert{s} + \alert{e}\)
- Encrypt :: \(d_{0}, \ d_{1} = \alert{v} \cdot a + \alert{e'},\ \alert{v} \cdot c + \alert{e''} + q/2 \cdot m \)
- Decrypt ::
  #+begin_export latex
\begin{align*}
\left\lfloor \frac{2}{q} \cdot \left(d_{1} - d_{0} \cdot \alert{s}\right) \right\rceil &= \left\lfloor \frac{2}{q} \cdot \left({\alert{v} \cdot (a \cdot \alert{s} + \alert{e}) + \alert{e''} + \frac{q}{2} \cdot m - \left(\alert{v} \cdot a + \alert{e'}\right) \cdot \alert{s}}\right) \right\rceil\\
&= \left\lfloor \frac{2}{q} \cdot \left({\alert{v} \cdot \alert{e} + \alert{e''} + \frac{q}{2} \cdot m - \alert{e'} \cdot \alert{s}}\right) \right\rceil = m\\
\end{align*}
  #+end_export


** Proof Sketch

- KeyGen :: \(c = a \cdot \alert{s} + \alert{e}\)
  - The public key \((a,c)\) is indistinguishable from uniform \((u', u'')\) by the (Ring-)LWE assumption

- Encrypt :: \(d_{0}, \ d_{1} = \alert{v} \cdot a + \alert{e'},\ \alert{v} \cdot c + \alert{e''} + q/2 \cdot m \)
  - Then \(\alert{v} \cdot u' + \alert{e''},\ \alert{v} \cdot u'' + \alert{e''}\) is indistinguishable from uniform by the (Ring)-LWE assumption

** Reconciliation
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

Once you have ElGamal, recovering Diffie-Hellman is straight forward.

- Common :: \(a\)
- Alice :: \(c_{0} = \alert{s} \cdot a + \alert{e_{0}}\)
- Bob :: \(c_{1} = a \cdot \alert{t} + \alert{e_{1}}\)
- Shared :: \[c_{0} \cdot \alert{t} = ( \alert{s} \cdot a + \alert{e_{0}})\cdot \alert{t} \approx \alert{s} \cdot a \cdot \alert{t} \approx \alert{s} \cdot (a \cdot \alert{t} + \alert{e_{1}}) = \alert{s} \cdot c_{1} \]

#+beamer: \framebreak

\[c_{0} \cdot \alert{t} = ( \alert{s} \cdot a + \alert{e_{0}})\cdot \alert{t} \approx \alert{s} \cdot a \cdot \alert{t} \approx \alert{s} \cdot (a \cdot \alert{t} + \alert{e_{1}}) = \alert{s} \cdot c_{1} \]

- The problem with this construction is that "\(\approx\)" \(\neq\) "\(=\)"
- Need to send a "hint" how to round correctly (2nd most significant bit) footfullcite:EPRINT:DinXieLin12
- Cannot have efficient Non-interactive Key Exchange (NIKE) without new ideas
- Here be +dragons+ patents
- NIST asked for "key exchange" but meant "key encapsulation", can build former generically from latter


* CCA Security

** Active Attacks

- Recall decryption
  \[\left\lfloor \frac{2}{q} \cdot \left(d_{1} - d_{0} \cdot {s}\right) \right\rceil = \left\lfloor \frac{2}{q} \cdot \left({\frac{q}{2} \cdot m + {v} \cdot {e} - {e'} \cdot {s} + {e''}}\right) \right\rceil = m\]  
- When the result of the rounding \(\neq m\) this contains information about
  \[{v} \cdot {e} - {e'} \cdot {s} + {e''}\]
  where the attacker/encrypter controls \(v, e'', e'\) and would like to learn \(s,e\).
  
** FO Transform (KEM Variant)

- Encrypt :: \(v,e', e'' \gets \operatorname{H}(\mathsf{seed})\) and \(m = \mathsf{seed}\) for some hash function \(\operatorname{H}\).
- Decrypt :: After decryption
   + compute \(v,e', e'' \gets \operatorname{H}(m')\) and
   + check \(c_{0} \overset{?}{=} v\cdot a + e'\) and \(c_{1} \overset{?}{=} v \cdot c + e'' + q/2 \cdot m'\).

fullcite:JC:FujOka13

fullcite:TCC:HofHovKil17  

** (Q)ROM

- The FO transform was originally proven secure when modelling the hash function as a Random Oracle (RO)
- Hash functions are public functions and thus can be implemented on a quantum computer
- We must model the hash function as a Quantum Random Oracle (QRO), accepting superposition queries

fullcite:EC:SaiXagYam18

* Practical Performance
 
** Baseline: Pre Quantum Cryptography

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

_RSA 2048_

|                |                        <r> |
| Key generation | \approx 130,000,000 cycles |
| Encapsulation  |      \approx 20,000 cycles |
| Decapsulation  |   \approx 2,700,000 cycles |
| Ciphertext     |                  256 bytes |
| Public key     |                  256 bytes |

\small https://bench.cr.yp.to/results-kem.html

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

_Curve25519_

|                |                    <r> |
| Key generation |  \approx 60,000 cycles |
| Key agreement  | \approx 160,000 cycles |
|                |                        |
| Public key     |               32 bytes |
| Key Share      |               32 bytes |

\small https://eprint.iacr.org/2015/943


** Kyber

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:


_Curve25519_

|                |                    <r> |
| Key generation |  \approx 60,000 cycles |
| Key agreement  | \approx 160,000 cycles |
|                |                        |
| Public key     |               32 bytes |
| Key Share      |               32 bytes |

\small https://eprint.iacr.org/2015/943

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

_Kyber-768 NIST PQC Round 2 submission:_

|                |                    <r> |
| Key generation | \approx  42,000 cycles |
| Encapsulation  | \approx  60,000 cycles |
| Decapsulation  | \approx  52,000 cycles |
| Ciphertext     |            1,088 bytes |
| Public key     |            1,184 bytes |

\small https://bench.cr.yp.to/results-kem.html

*** Interpretation

- An Ethernet frame takes 1,500 bytes
- Your laptop does about \(2\cdot 10^{9}\) cycles per second

** Fin
:PROPERTIES:
:BEAMER_OPT: standout
:END:

#+BEGIN_CENTER
\Huge \alert{Thank You}
#+END_CENTER

** References
:PROPERTIES:
:BEAMER_OPT: allowframebreaks
:END:

#+BEGIN_EXPORT LaTeX
\renewcommand*{\bibfont}{\scriptsize}
\printbibliography[heading=none]
#+END_EXPORT

*** Dummy Slide                                                                                               :noexport:

Some text[fn:2]

*** Build Artefacts                                                                                           :noexport:

* Footnotes

[fn:1] _All_ NIST PQC candidates based on (Ring-/Module-)LWE encrypt like this

[fn:2] A footnote

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (when (eq major-mode 'org-mode) (org-beamer-export-to-latex))) nil t)
# eval: (typo-mode -1)
# eval: (smartparens-mode 1)
# eval: (org-cdlatex-mode 1)
# End:
