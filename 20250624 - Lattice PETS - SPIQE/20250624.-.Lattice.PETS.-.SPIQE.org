#+title: Lattices give us KEMs and FHE, but where are the efficient lattice PETs?
#+subtitle: By Example of (Verifiable) Oblivious PRFs
#+options: H:2 toc:t num:t ':t
#+language: en
#+select_tags: export
#+exclude_tags: noexport


#+latex_class: beamer
#+latex_class_options: [xcolor=table,10pt,aspectratio=169]

#+latex_header: % \tikzset{external/export=true}
#+latex_header: \providecommand{\ring}[0]{\ensuremath{\mathcal{R}}\xspace}
#+latex_header: \PassOptionsToPackage{british}{babel}

#+macro: fnsize @@beamer:{\footnotesize@@ $1 @@latex:\par}@@

#+author: Martin R. Albrecht
#+email: martin.albrecht@{kcl.ac.uk,sandboxquantum.com}
#+date: 24 June 2025
#+startup: beamer

* LWE and DH
** On the one hand, on the other hand

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

_Bottom of the Stack:_

- Kyber (KEM)
- Dilithium (Signature)
- Falcon (Signature)

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

_Top of the Stack:_

- FHE cite:PhD:Gentry09,ITCS:BraGenVai12,JC:CGGI20,C:GenSahWat13
- iO cite:FOCS:GGHRSW13,EC:BDGM20
- FE cite:EC:SahWat05,TCC:BonSahWat11

** Somewhat efficient

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:


_RSA 2048_

|                |                  <r> |
| Key generation | \approx 130,000,000 cycles |
| Encapsulation  |      \approx 20,000 cycles |
| Decapsulation  |   \approx 2,700,000 cycles |
| Ciphertext     |            256 bytes |
| Public key     |            256 bytes |

@@beamer:{\tiny@@ https://bench.cr.yp.to/results-kem.html @@beamer:}@@

_Curve25519_

|                |              <r> |
| Key generation |  \approx 60,000 cycles |
| Key agreement  | \approx 160,000 cycles |
|                |                  |
| Public key     |         32 bytes |
| Key Share      |         32 bytes |

@@beamer:\tiny@@ https://eprint.iacr.org/2015/943

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

_Kyber-768_

|                |              <r> |
| Key generation | ≈  38,000 cycles |
| Encapsulation  | ≈  49,000 cycles |
| Decapsulation  | ≈  39,000 cycles |
| Ciphertext     |      1,088 bytes |
| Public key     |      1,184 bytes |

@@beamer:\tiny@@ https://bench.cr.yp.to/results-kem.html

** The Learning with Errors Problem (LWE)

Given $(\vec{A},\vec{c})$ with $\vec{c} \in \ZZ_q^{m}$, $\vec{A} \in \ZZ_q^{m \times n}$, $\vec{s} \in \ZZ_q^{n}$ and *small $\vec{e} \in \ZZ^{m}$* is

#+begin_export latex
\begin{align*}
\left(\begin{array}{c}
\\
\\
\\ 
\vec{c} \\
\\
\\
\\
\end{array} \right) = \left(
\begin{array}{ccc}
\leftarrow & n & \rightarrow \\
\\
\\ 
& \vec{A} & \\
\\
\\
\\
\end{array} \right) \times \left( \begin{array}{c}
\\
\vec{s} \\
\\
\end{array} \right) \alert{+ \left(
\begin{array}{c}
\\
\\
\\ 
\vec{e} \\
\\
\\
\\
\end{array} 
\right)}
\end{align*}
#+end_export

or $\vec{c} \sample \mathcal{U}\left(\ZZ_q^{m}\right)$.

** LWE

#+begin_export latex
\[
\begin{pmatrix}c_{0} \\ c_{1} \\ c_{2} \\ c_{3} \\ c_{4} \\ c_{5} \\ c_{6} \\ c_{7}\end{pmatrix} = 
\left(\begin{array}{rrrrrrrr}
a_{0,0} & a_{0,1} & a_{0,2} & a_{0,3} & a_{0,4} & a_{0,5} & a_{0,6} & a_{0,7}\\
a_{1,0} & a_{1,1} & a_{1,2} & a_{1,3} & a_{1,4} & a_{1,5} & a_{1,6} & a_{1,7}\\
a_{2,0} & a_{2,1} & a_{2,2} & a_{2,3} & a_{2,4} & a_{2,5} & a_{2,6} & a_{2,7}\\
a_{3,0} & a_{3,1} & a_{3,2} & a_{3,3} & a_{3,4} & a_{3,5} & a_{3,6} & a_{3,7}\\
a_{4,0} & a_{4,1} & a_{4,2} & a_{4,3} & a_{4,4} & a_{4,5} & a_{4,6} & a_{4,7}\\
a_{5,0} & a_{5,1} & a_{5,2} & a_{5,3} & a_{5,4} & a_{5,5} & a_{5,6} & a_{5,7}\\
a_{6,0} & a_{6,1} & a_{6,2} & a_{6,3} & a_{6,4} & a_{6,5} & a_{6,6} & a_{6,7}\\
a_{7,0} & a_{7,1} & a_{7,2} & a_{7,3} & a_{7,4} & a_{7,5} & a_{7,6} & a_{7,7}\\
\end{array}\right) \cdot
\begin{pmatrix}s_{0} \\ s_{1} \\ s_{2} \\ s_{3} \\ s_{4} \\ s_{5} \\ s_{6} \\ s_{7}\end{pmatrix} +
\begin{pmatrix}e_{0} \\ e_{1} \\ e_{2} \\ e_{3} \\ e_{4} \\ e_{5} \\ e_{6} \\ e_{7}\end{pmatrix}
\]
#+end_export

*** Performance

Storage: \(\mathcal{O}(n^{2})\); Computation \(\mathcal{O}(n^{2})\)

** Ring-LWE/Polynomial-LWE

#+begin_src jupyter-python :kernel sagemath :results raw :exports none
P = PolynomialRing(QQ, 3*8, ["a_%d"%i for i in range(8)] + ["s_%d"%i for i in range(8)] + ["e_%d"%i for i in range(8)])
a = P.gens()[0:8]
s = P.gens()[8:16]
e = P.gens()[16:24]
R.<X> = PolynomialRing(P)
F = X^8 + 1
a = sum(a[i]*X^i for i in range(8))
s = sum(s[i]*X^i for i in range(8))
e = sum(e[i]*X^i for i in range(8))
A = matrix([((X^i*a) % F).list() for i in range(8)]).T
# print((A*vector(s) + vector(e))[2])
# print(((a*s + e) % f)[2])
latex(A)
#+end_src

#+begin_export latex
\[
\begin{pmatrix}c_{0} \\ c_{1} \\ c_{2} \\ c_{3} \\ c_{4} \\ c_{5} \\ c_{6} \\ c_{7}\end{pmatrix} = 
\left(\begin{array}{rrrrrrrr}
\alert{a_{0}} & -a_{7} & -a_{6} & -a_{5} & -a_{4} & -a_{3} & -a_{2} & -a_{1} \\
\alert{a_{1}} & a_{0} & -a_{7} & -a_{6} & -a_{5} & -a_{4} & -a_{3} & -a_{2} \\
\alert{a_{2}} & a_{1} & a_{0} & -a_{7} & -a_{6} & -a_{5} & -a_{4} & -a_{3} \\
\alert{a_{3}} & a_{2} & a_{1} & a_{0} & -a_{7} & -a_{6} & -a_{5} & -a_{4} \\
\alert{a_{4}} & a_{3} & a_{2} & a_{1} & a_{0} & -a_{7} & -a_{6} & -a_{5} \\
\alert{a_{5}} & a_{4} & a_{3} & a_{2} & a_{1} & a_{0} & -a_{7} & -a_{6} \\
\alert{a_{6}} & a_{5} & a_{4} & a_{3} & a_{2} & a_{1} & a_{0} & -a_{7} \\
\alert{a_{7}} & a_{6} & a_{5} & a_{4} & a_{3} & a_{2} & a_{1} & a_{0}
\end{array}\right)\cdot
\begin{pmatrix}s_{0} \\ s_{1} \\ s_{2} \\ s_{3} \\ s_{4} \\ s_{5} \\ s_{6} \\ s_{7}\end{pmatrix} +
\begin{pmatrix}e_{0} \\ e_{1} \\ e_{2} \\ e_{3} \\ e_{4} \\ e_{5} \\ e_{6} \\ e_{7}\end{pmatrix}
\]
#+end_export

*** Performance (\(n\) is a power of two)

Storage: \(\mathcal{O}(n)\); Computation \(\mathcal{O}(n \log n)\)

** Ring-LWE/Polynomial-LWE

#+begin_export latex
\begin{align*}
\sum_{i=0}^{n-1} c_{i} \cdot X^{i} &= \left(\sum_{i=0}^{n-1} a_{i} \cdot X^{i}\right) \cdot \left(\sum_{i=0}^{n-1} s_{i} \cdot X^{i}\right) + \sum_{i=0}^{8} e_{i} \cdot X^{i} \bmod X^{n} +1\\
c(X) &= a(X) \cdot s(X) + e(X) \bmod \phi(X)
\end{align*}
#+end_export

We write \(\ring \coloneqq \ZZ[X]/\phi(X)\) and \(\ring_{q} \coloneqq \ZZ_{q}[X]/\phi(X)\).

{{{fnsize(fullcite:AC:SSTX09)}}}

{{{fnsize(fullcite:EC:LyuPeiReg10)}}}

** Convention

- I am going to use the Ring-LWE formulation \[c_{i}(X) = a_{i}(X)\cdot s(X) + e_{i}(X)\]
  Thus, each sample corresponds to "\(n\) LWE samples"
- I will suppress the "\((X)\)" in "\(a(X)\)" etc.
- I will assume \(s\) is "small" and that the product of two "small" things is "small".
- I will write \(\alert{e_{i}}\) to emphasise that \(e_{i}\) is small.

*** TL;DR: I will write
 \[c_{i} = a_{i}\cdot \alert{s} + \alert{e_{i}}\]

** DH to Ring-LWE Dictionary

| DH Land                        | Ring-LWE Land                                                 |
|--------------------------------+---------------------------------------------------------------|
| \(g\)                          | \(a\)                                                         |
| \(g^x\)                        | \(a\cdot {s} + \alert{e}\)                                                    |
|                                |                                                               |
| \(g^x \cdot g^y = g^{x+y}\)    | \((a\cdot {s} + \alert{e_0}) + (a \cdot {t} + \alert{e_1}) = a \cdot {(s+t)} + \alert{e'}\)                   |
|                                |                                                               |
| \((g^a)^b = (g^b)^a\)          | \((a\cdot \alert{s} + \alert{e})\cdot \alert{t} = (a\cdot \alert{s} \cdot \alert{t} + \alert{e} \cdot \alert{t})\) |
|                                | \(\approx a\cdot \alert{s} \cdot \alert{t} \approx (a\cdot \alert{t} + \alert{e})\cdot \alert{s}\) |
|                                |                                                               |
| \((g, g^a, g^b, g^{ab})\)      | \((a,\ a\cdot \alert{s} + \alert{e},\ a\cdot \alert{t} + \alert{d},\ a \cdot \alert{s} \cdot \alert{t} + \alert{e'})\) |
| \(\approx_c (g, g^a, g^b, u)\) | \(\approx_c (a,\ a\cdot \alert{s} + \alert{e},\ a\cdot \alert{t} + \alert{d},\ u)\) |

** ElGamal & LPR10

_ElGamal_

- KeyGen :: \(h = g^{s}\)
- Encrypt :: \(d_{0},\ d_{1} = \left({g^{v},\  m \cdot h^{v}}\right)\) for some random \(v\)
- Decrypt :: \(d_{1} / d_{0}^{s} = m \cdot (g^{s})^{v} / (g^{v})^{s} = m\)

_[[cite:EC:LyuPeiReg10]]_

- KeyGen :: \(c = a \cdot \alert{s} + \alert{e}\)
- Encrypt :: \(d_{0}, \ d_{1} = \alert{v} \cdot a + \alert{e'},\ \alert{v} \cdot c + \alert{e''} +\left\lfloor \frac{q}{2} \right\rfloor  \cdot m \)
- Decrypt ::
  #+begin_export latex
\begin{align*}
\left\lfloor \frac{2}{q} \cdot \left(d_{1} - d_{0} \cdot \alert{s}\right) \right\rceil &= \left\lfloor \frac{2}{q} \cdot \left({\alert{v} \cdot (a \cdot \alert{s} + \alert{e}) + \alert{e''} + \left\lfloor \frac{q}{2} \right\rfloor \cdot m - \left(\alert{v} \cdot a + \alert{e'}\right) \cdot \alert{s}}\right) \right\rceil\\
&= \left\lfloor \frac{2}{q} \cdot \left({\alert{v} \cdot \alert{e} + \alert{e''} + \left\lfloor \frac{q}{2} \right\rfloor  \cdot m - \alert{e'} \cdot \alert{s}}\right) \right\rceil = m\\
\end{align*}
  #+end_export

* Follow the Blueprint

** Verifiable Oblivious PRFs

#+begin_export latex
\procedure{}{%
\textbf{Client} \< \<  \textbf{Functionality} \< \< \textbf{Server}\\
\< \sendmessageright{top=\(m\)} \< \< \sendmessageleft{top=\(k\)} \<\\
\< \< \text{\(c = F_k(m)\)} \< \<\\
\< \sendmessageleft{top=\(c\)} \< \< \sendmessageright{top=\(\bot\)} \<\\
}
#+end_export

** Example Applications: Privacy Pass

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.6
:END:

_Problem:_

- Tor users are having a hard time on Cloudflare protected sites
- They’re constantly asked to solve CAPTCHAs to prove that they’re not bots
- Want a privacy-preserving way of running reverse Turing test once and re-use later

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.4
:END:

_Idea:_

- Solve CAPTCHA
- Evaluate a VOPRF on a bunch of random points to produce tokens \(F_k(x_i)\)
- Redeem token by sending \((x_i, F_k(x_i))\)

***                                                            :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

@@beamer:\vspace{1em}@@

{{{fnsize(fullcite:PoPETS:DGSTV18)}}}

** DH-Based OPRF

#+begin_export latex
\centering
\procedure{}{%
\textbf{Client} \< \< \textbf{Server}\\
\< \sendmessageright*{\text{\(c_x \coloneqq  H(x) \cdot g^{r}\)}} \<\\
\< \sendmessageleft*{\text{\(d_x \coloneqq  c_x^k, c = g^{k}\)}} \<\\
\text{\(d_x/c^r = H(x)^k\)} \< \<\\
}
#+end_export

\[d_x/c^r = c_x^k/c^r = (H(x) \cdot g^{r})^k/(g^k)^r = H(x)^k\]

** "Just take Logs"

#+begin_export latex
\centering
\procedure{}{%
\textbf{Client} \< \< \textbf{Server}\\
\< \sendmessageright{length=5cm,top=\text{\(c_x \coloneqq  H(x) + a \cdot \alert{r} + \alert{e}\)}} \<\\
\< \sendmessageleft{length=5cm,top=\text{\(d_x \coloneqq c_x \cdot \alert{k} + \alert{e'}, c := a \cdot \alert{k} + \alert{e''}\)}} \<\\
\text{\(\left\lfloor \frac{p}{q} \cdot d_x - c \cdot \alert{r} \right\rceil \)} \< \<\\
}
#+end_export

#+begin_export latex
\begin{align*}
d_x - c \cdot \alert{r}  &= \left(H(x) + a \cdot \alert{r} + \alert{e}\right)\cdot\alert{k} + \alert{e'} - \left(a \cdot \alert{k} + \alert{e''}\right) \cdot \alert{r}\\
                     &= H(x)\cdot\alert{k} + a \cdot \alert{r}\cdot\alert{k} + \alert{e}\cdot\alert{k} + \alert{e'} - a \cdot \alert{k} \cdot \alert{r} - \alert{e''} \cdot \alert{r}\\
                     &= H(x)\cdot\alert{k} + \alert{e}\cdot\alert{k} + \alert{e'}  - \alert{e''} \cdot \alert{r}\\
                     &\approx H(x)\cdot\alert{k} 
\end{align*}
#+end_export

** The Trouble

- Trapdoor Friendly :: It is not safe to output \(c_{x} \cdot \alert{k} + \alert{e}\) for some arbitrary \(c_{x}\)
- Noise Leakage :: "\(\approx\)" glosses over \(\alert{e}\cdot\alert{k} + \alert{e}'  - \alert{e}'' \cdot \alert{r}\) which depends on \(k\)
- Noise Growth :: "\(\approx\)" is not \(=\), how do we arrive at the same value?

* Trapdoor Friendly 

** The Problem

#+begin_center
The server has to output \(c_{x} \cdot \alert{k} + \alert{e}'\) for some \(c_x \overset{?}{=}  H(x) + a \cdot \alert{r} + \alert{e}\). This may not be safe.
#+end_center

** Point Validation
:PROPERTIES:
:beamer_opt: fragile
:END:

*** 
:PROPERTIES:
:beamer_col: 0.5
:beamer_opt: t
:END:

#+begin_export latex
\newcommand{\mfi}[1]{\fbox{\includegraphics[width=0.4\paperwidth]{#1}}}
\setlength{\fboxsep}{0pt}
\begin{tikzpicture}
\pgfplotsset{width=\textwidth, height=\textheight}
\only<1->{\node[anchor=north west] at (0,0) {\mfi{point-validation-PKC_ABMSV03.png}};}
\only<2->{\node[anchor=north west] at (0.5,-0.5) {\mfi{point-validation-CCS_AMPS18.png}};}
\node[anchor=north west] at (0.5,-0.5) {\phantom{{\mfi{point-validation-CCS_AMPS18.png}}}};
\end{tikzpicture}
#+end_export

*** 
:PROPERTIES:
:beamer_col: 0.5
:beamer_opt: t
:END:

@@beamer:\pause@@
@@beamer:\pause@@

- However, (likely) no "point validation" for LWE by the NTRU assumption cite:NTRU:HPS98:
  \[
  \alert{f}, \alert{g} \sample \ring^{2}: h \coloneqq f/g \approx_{c} \mathcal{U}(\ring_q)
  \]
- Attack[fn::assuming \(\alert{f},\alert{g},\alert{k},\alert{e}\) are sufficiently small]:
  1. Sample \(\alert{f},\alert{g} \sample \ring^{2}\) and set \(\Delta \coloneqq  \lceil \sqrt{q} \rceil\)
  3. Submit \(a \coloneqq \Delta \cdot f/g\)
  4. Receive \(c \coloneqq a \cdot \alert{k} + \alert{e}\) and compute
  #+begin_export latex
  \begin{align*}
    \alert{g} \cdot c & = \alert{g} \cdot (\Delta \cdot f/g \cdot \alert{k} + \alert{e})\\
    \alert{g} \cdot c & = \Delta \cdot \alert{f} \cdot \alert{k} + \alert{g} \cdot \alert{e}\\
          &\equiv \alert{g} \cdot \alert{e} \bmod \Delta
  \end{align*}
  #+end_export     
    
** Workaround

- The client proves in zero-knowledge that \(c_{x}\) is well-formed: \(c_{x} \coloneqq H(x) + a \cdot \alert{r} + \alert{e}\)
- This means the client needs to prove the evaluation of \(H(x)\)
- This is sound, we do not need to treat \(H(x)\) as a Random Oracle
- This is expensive in terms of bandwidth and computation cost
  + cite:PKC:ADDS21: \(\approx\) 128GB per evaluation using cite:C:YAZXYW19
  + cite:AC:AlbGur24: \(\approx\) 63kB per evaluation using cite:C:BeuSei23

*** An Aside                                                      :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:

This NTRU "attack" can be used constructively to make proof systems online extractable (e.g. cite:EC:ADDG24)

* Noise Leakage

** The Problem

The client learns
\[\alert{e}\cdot\alert{k} + \alert{e}'  - \alert{e}'' \cdot \alert{r}\]
where it chooses \(\alert{e}\) and \(\alert{r}\). 

*** The Attack

Write \(\alert{\vec{a}} \coloneqq (\alert{e}, -\alert{r})\) and \(\alert{\vec{s}} \coloneqq (\alert{k}, \alert{e''})\), then we can rewrite \[\alert{e}\cdot\alert{k} + \alert{e}'  - \alert{e}'' \cdot \alert{r}\]
as \(\alert{\vec{a}} \cdot \alert{\vec{s}} + \alert{e''}\) which is essentially an instance of "LWE without modular reduction" cite:AC:BDEFT18 which is easy.[fn::The word "essentially" does a lot of work here. That is, this is a simplification because \(\alert{e''}\) changes in each invocation and the attacks from cite:AC:BDEFT18 do not apply as is.]

** Solutions

- Statistical Noise Drowning :: \(\Vert\alert{e}'\Vert \geq \lambda^{\omega(1)} \cdot \Vert\alert{e}\cdot\alert{k}  - \alert{e}'' \cdot \alert{r}\Vert\) cite:PKC:ADDS21
- Rényi Noise Drowning :: \(\Vert\alert{e}'\Vert \geq \poly \cdot \sqrt{Q} \cdot \Vert\alert{e}\cdot\alert{k}  - \alert{e}'' \cdot \alert{r}\Vert\) cite:AC:AlbGur24
  + \(Q\) is the number of queries
  + must play a search game instead of a distinguishing game (use ROM)
- Computational Assumption :: \(\Vert\alert{e}'\Vert \geq \poly \cdot \sqrt{Q} \cdot \Vert\alert{e}\cdot\alert{k}  - \alert{e}'' \cdot \alert{r}\Vert\) cite:EPRINT:ESTX24
  + similar to Hint-(M)LWE, but w/o reduction from (M)LWE
    
*** Cost

Since we require \(q > \Vert\alert{e}'\Vert\) we have that \(q/\Vert \alert{e} \Vert\) -- the "signal to noise ratio" of the underlying RLWE samples -- is quite big.  A big signal to noise ratio makes decoding -- i.e. solving LWE -- easier. This requires us to use larger secret dimensions \(n\) to compensate. Bandwidth cost is essentially \(n \log q\).

* Noise Growth

** The Problem

#+begin_export latex
\begin{align*}
H(x)\cdot\alert{k} + \alert{e}\cdot\alert{k} + \alert{e'}  - \alert{e''} \cdot \alert{r}
&\approx H(x)\cdot\alert{k}\\
\left\lceil \frac{2}{q} \cdot \bigg(H(x)\cdot\alert{k} + \alert{e}\cdot\alert{k} + \alert{e'}  - \alert{e''} \cdot \alert{r}\bigg)\right\rfloor
&\overset{?}{=} \left\lceil \frac{2}{q} \cdot \bigg( H(x)\cdot\alert{k} \bigg)\right\rfloor
\end{align*}
#+end_export

** Rounding

#+begin_export latex
\centering
\begin{tikzpicture}
  \draw (0,0) circle (2cm);

  \fill[red!30] (0,0) -- (-15:2cm) arc (-15:15:2cm) -- cycle;
  \fill[red!30] (0,0) -- (165:2cm) arc (165:195:2cm) -- cycle;


  \draw[dashed] (0,-2) -- (0,2);
  \draw[dashed] (-2,0) -- (2,0);
  \draw[rotate=75] (0,-2) -- (0,2);
  \draw[rotate=-75] (0,-2) -- (0,2);

  \node at (0,2.3) {$0$};
  \node at (2.5,0.6) {$\frac{q}{4}-\delta$};
  \node at (2.4,0) {$\frac{q}{4}$};
  \node at (2.5,-0.6) {$\frac{q}{4}+\delta$};
  \node at (0,-2.4) {$\frac{q}{2}$};
  \node at (-2.6,0.6) {$\frac{3\,q}{4}+\delta$};
  \node at (-2.4,0) {$\frac{3\,q}{4}$};
  \node at (-2.6,-0.6) {$\frac{3\,q}{4}-\delta$};

  \node at (0, 1) {$b=0$};
  \node at (0,-1) {$b=1$};

\end{tikzpicture}
#+end_export

** Solution Attempt

*** 
:PROPERTIES:
:beamer_col: 0.5
:END:

Make \(q > \poly\) such that the red area is negligibly small.


**** Malicious Servers                                                 :B_block:
:PROPERTIES:
:beamer_env: block
:beamer_act: <2->
:END:

This argument works on average but does not work against adversaries that somehow pick \(k\) s.t. \(H(x) \cdot k\) lands in the red area with high probability for some \(x\).

*** 
:PROPERTIES:
:beamer_col: 0.5
:END:

#+begin_export latex
\begin{tikzpicture}
  \draw (0,0) circle (2cm);

  \fill[red!30] (0,0) -- (-5:2cm) arc (-5:5:2cm) -- cycle;
  \fill[red!30] (0,0) -- (175:2cm) arc (175:185:2cm) -- cycle;


  \draw[dashed] (0,-2) -- (0,2);
  \draw[dashed] (-2,0) -- (2,0);
  \draw[rotate=85] (0,-2) -- (0,2);
  \draw[rotate=-85] (0,-2) -- (0,2);

  \node at (0,2.3) {$0$};
  \node at (2.5,0.6) {$\frac{q}{4}-\delta$};
  \node at (2.4,0) {$\frac{q}{4}$};
  \node at (2.5,-0.6) {$\frac{q}{4}+\delta$};
  \node at (0,-2.4) {$\frac{q}{2}$};
  \node at (-2.6,0.6) {$\frac{3\,q}{4}+\delta$};
  \node at (-2.4,0) {$\frac{3\,q}{4}$};
  \node at (-2.6,-0.6) {$\frac{3\,q}{4}-\delta$};

  \node at (0, 1) {$b=0$};
  \node at (0,-1) {$b=1$};


\end{tikzpicture}
#+end_export

** Solution

- Plant a hard SIS instance in each coefficient: 1D-SIS cite:PKC:ADDS21
  #+beamer: \pause
  - Yes, seriously!
  - This requires \(q \gg 2^{\secpar}\)
  #+beamer: \pause
- Change the PRF output to \(H(x) \cdot \alert{k} + H_{2}(x,c_0)\) cite:AC:AlbGur24
  - \(H_{2}()\) is some Random Oracle that randomly shifts \(H(x) \cdot \alert{k}\)
  - \(c_{0} \coloneqq a_{0} \cdot \alert{k} + \alert{e_{0}'}\) is a commitment to \(\alert{k}\)
  - The trick is from cite:USENIX:GKQMS24
  - \(q \gg \poly\) is sufficient

*** Stuck with a super-polynomial \(q\)

Big "signal-to-noise" ratio, forcing us to increase \(n\), as above.
    
** Related: Can't Just Do It™ — NIKE

NIKE enables Alice and Bob, who know each others’ public keys, to agree on shared key without requiring any interaction cite:DifHel76
- Deployed in [[https://www.wireguard.com/][WireGuard]] cite:EPRINT:HNSWZ20 and static DH is also used in e.g. Google’s QUIC.
- For lattices there are significant barriers cite:PKC:GKRS20.
- Stark contrast to *interactive* key-exchanges or plain public-key encryption
  1. We send along some “hints” that allow to handle the noise
  2. secrets are not re-used, allowing us to avoid expensive “well-formedness” proofs
- cite:USENIX:GKQMS24 is an instantiation that essentially accepts the super-polynomial modulus

* Wrapping Up

** Realisations of this Blueprint

| Work               | Model | 1-time Offline | Online | \(Q\)      |
|                    |       |            <r> |    <r> |            |
|--------------------+-------+----------------+--------+------------|
| cite:PKC:ADDS21    | H-H   |             -- |    2MB |            |
| cite:PKC:ADDS21    | M-M   |             -- |  128GB |            |
| cite:AC:AlbGur24   | M-M   |          114kB |  198kB | \(2^{32}\) |
| cite:EPRINT:ESTX24 | M-M   |           20kB |  159kB | \(2^{32}\) |

#+begin_center
H: semi-honest, M: malicious
#+end_center

** An Alternative from FHE cite:EC:ADDG24

We do have efficient FHE, indeed FHE ciphertexts are typically *smaller* than the messages exchanged in the schemes discussed above.
- Simple idea:
  1. Client FHE encrypts \(x\) as \([x]\)
  2. Server homomorphically computes PRF using plaintext \(k\) and \([x]\) to obtain \([F_{k}(x)]\)
  3. Client FHE decrypts \(F_{k}(x)\)
- Problem: PRFs need deep circuits, deep circuits are expensive
- Proposal: Use Dark Matter (weak-)PRF candidate cite:TCC:BIPSW18 \( \sum \left(\mat{A}\cdot \vec{x} \bmod 2\right) \bmod 3\) where \(\mat{A}\) is the secret key
- This can be computed with one level of FHE bootstrapping

** Other Round-Optimal Alternatives w/o Trusted Setup

#+beamer: \begin{small}

| Work    | Assumption                       | Model   | 1-time Offline |  Online |
|         |                                  |         |            <r> |     <r> |
|---------+----------------------------------+---------+----------------+---------|
| ADDS21  | (R)LWE+SIS                       | H-H     |              - |     2MB |
| ADDS21  | (R)LWE+SIS                       | M-M     |              - |   128GB |
| AG24    | (R)LWE+SIS                       | M-M     |          114kB |   198kB |
| ADDG23  | mod(2,3)+lattices                | M-H     |          2.5MB |    10KB |
| ADDG23  | mod(2,3)+lattices                | M-M     |          2.5MB |   160KB |
| ESTX24  | iMLWER-RU+MLE+SIS                | M-M     |           20kB |   159KB |
| APRR24  | mod(2,3)                         | M-H, pp |          4.75B |  114.5B |
| FOO23   | AES+Garbled Circuits             | H-H     |              - |  6.79MB |
| Basso24 | Higher-Dimensional isogenies     | M-M     |              - |  28.9kB |
| HHM+23  | Isogenies F_p + lattices + HE OT | H-H     |              - |   640kB |
| dSP23   | Isogenies F_p                    | M-H, pp |        68.4 kB |    384B |
| dSP23   | Isogenies F_p                    | M-H, pp |              - | 16.38kB |

#+beamer: \end{small}

#+begin_center
{{{fnsize(adapted from https://heimberger.xyz/oprfs.html)}}}
#+end_center

** Fin
:PROPERTIES:
:BEAMER_OPT: standout
:END:

#+begin_center
@@beamer:{\Huge\alert{Thank You}\par}@@

https://ia.cr/2019/1271

https://ia.cr/2023/232

https://ia.cr/2024/1459
#+end_center



** References
:PROPERTIES:
:BEAMER_OPT: allowframebreaks
:END:

#+BEGIN_EXPORT LaTeX
\renewcommand*{\bibfont}{\scriptsize}
\printbibliography[heading=none]
#+END_EXPORT

** Technical Artefacts                                                :noexport:

# Local Variables:
# org-tags-column: -80
# eval: (add-hook 'after-save-hook #'org-beamer-export-to-latex nil t)
# eval: (visual-fill-column-mode t)
# eval: (adaptive-wrap-prefix-mode t)
# eval: (typo-mode -1)
# eval: (smartparens-mode 1)
# eval: (org-cdlatex-mode 1)
# End:
