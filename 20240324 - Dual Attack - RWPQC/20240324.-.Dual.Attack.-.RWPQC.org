#+title: An Update on Lattice Cryptanalysis Vol. 1
#+subtitle: The Dual Attack on LWE
#+options: H:1 toc:nil num:t ':t
#+language: en
#+select_tags: export
#+exclude_tags: noexport

#+latex_header: \PassOptionsToPackage{british}{babel}
#+latex_header: \setbeamerfont{alerted text}{series=\ifmmode\boldmath\else\bfseries\fi}

#+latex_class: beamer
#+latex_class_options: [xcolor=table,10pt,aspectratio=169]
#+property: header-args:sage :tolatex lambda obj: r'(%s)' % latex(obj) :results raw

#+latex_header: % \tikzset{external/export=true}
#+latex_header: \institute{King's College London \& SandboxAQ}


#+latex_header: \usepackage{newunicodechar}
#+latex_header: \newfontfamily{\fallbackfont}{DejaVu Sans}
#+latex_header: \DeclareTextFontCommand{\textfallback}{\fallbackfont}
#+latex_header: \newcommand{\fallbackchar}[2][\textfallback]{\newunicodechar{#2}{#1{#2}}}
#+latex_header: \fallbackchar{↻}


#+latex_header: \usepackage{luacolor}
#+latex_header: \usepackage{lua-ul}
#+latex_header: \definecolor{BrightOrange}{HTML}{f8e8c6}

#+macro: fnsize @@latex:{\footnotesize@@ $1 @@latex:\par}@@

#+author: Martin R. Albrecht
#+email: martin.albrecht@{kcl.ac.uk,sandboxquantum.com}
#+date: RWPQC
#+startup: beamer



* Kyber

** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+attr_latex: :height .75\textheight  :options keepaspectratio
[[./lightsaber.jpeg]]

*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+attr_latex: :height .75\textheight  :options keepaspectratio
[[./kyber.png]]

**                                                             :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

The reason you cannot find information about lightsaber crystals any longer …

* Learning with Errors

** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_opt: t
:BEAMER_col: 0.6
:END:

Given \((\mat{A},\vec{c}) \in \ZZ_{q}^{m \times n} \times \ZZ_{q}^{m}\), find \(\vec{s}  \in \ZZ^{n}\) when

#+begin_export latex
\[
\left(\begin{array}{c} \\ \\ \\ \vec{c}\\ \\ \\ \\ \end{array} \right)
\equiv \left(\begin{array}{ccc}
\leftarrow & n & \rightarrow \\ \\ \\ 
& \mathbf{A} & \\
\\ \\ \\
\end{array} \right)
\cdot \left(\begin{array}{c} \\ \\ \vec{s}\\ \\ \\ \end{array} \right)
+ \left(\begin{array}{c} \\ \\ \\ \vec{e}\\ \\ \\ \\\end{array}\right)
\bmod q
\]
#+end_export

for \(\vec{e} \in \ZZ^{m}\) with small entries.

*** Example                                                       :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:

\(n = 1024, m=2048, q=7681, |e_{i}| \approx 2\)

** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_opt: t
:BEAMER_col: 0.4
:END:

*** "Small Entries"

#+begin_export latex
\begin{tikzpicture}
  \begin{axis}[
    domain=-10:10,
    grid=major,smooth,
    % xlabel=$x$,
    % ylabel=$\approx \textnormal{Pr}(x)$,
    ]
    \addplot[color=LightBrown,thick,samples=50,smooth]{exp(-(x^2)/18)};
    \addplot[color=DarkBrown,only marks] coordinates {
      (-9, 0.011)
      (-8, 0.028)
      (-7, 0.065)
      (-6, 0.135)
      (-5, 0.249)
      (-4, 0.411)
      (-3, 0.606)
      (-2, 0.800)
      (-1, 0.945)
      (0, 1.000)
      (1, 0.945)
      (2, 0.800)
      (3, 0.606)
      (4, 0.411)
      (5, 0.249)
      (6, 0.135)
      (7, 0.065)
      (8, 0.028)
      (9, 0.011)
    };
  \end{axis}
\end{tikzpicture}
#+end_export

***                                                            :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

No loss in security if secret \(\vec{s}\) and error \(\vec{e}\) have same distribution cite:C:ACPS09

* Primal Attack

** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: column
:BEAMER_col: 0.7
:END:

We can reformulate \(\vec{c} - \mat{A} \cdot \vec{s} \equiv \vec{e} \bmod q\)  over the Integers as:
#+begin_export latex
\[
    \begin{pmatrix}q\mat{I} & -\mat{A}\\0 & \mat{I}\\\end{pmatrix}
  \cdot \begin{pmatrix}\vec{*}\\\vec{s}\end{pmatrix}
  + \begin{pmatrix}\vec{c}\\\vec{0}\end{pmatrix}
  = \begin{pmatrix}\vec{e}\\\vec{s}\end{pmatrix}
\]
#+end_export
Alternatively:
#+begin_export latex
\[
  \mat{B} = \begin{pmatrix}q\mat{I} & -\mat{A} & \vec{c}\\
  0 & \mat{I} & 0\\
  0 & 0 & 1\\
  \end{pmatrix}
  , \qquad
  \mat{B}
  \cdot \begin{pmatrix}\vec{*}\\\vec{s}\\1\end{pmatrix}
  = \begin{pmatrix}\vec{e}\\\vec{s}\\1\end{pmatrix}
\]
#+end_export 

*** A Unique Shortest Vector

There exists an integer-linear combination of the columns of \(\mat{B}\) that produces a vector with “unusually” small entries

** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: column
:BEAMER_col: 0.3
:END:

*** uSVP                                                          :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:

Find a unique shortest vector amongst the integer combinations of the columns of:
#+begin_export latex
\[
  \mat{B} = \begin{pmatrix}
 q\mat{I} & -\mat{A} & \vec{c}\\
 0        & \mat{I}  & 0\\
 0        & 0        & 1\\
  \end{pmatrix}
\]
#+end_export
where \(\mat{B} \in \ZZ^{d \times d}\).

* Dual Attack


** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.6
:END:


- Consider \(\vec{c} \equiv \mat{A} \cdot \vec{s} + \vec{e} \bmod q\) with both \(\vec{s}\) and \(\vec{e}\) short or \(\vec{c}\) uniform.
- Let \(\vec{u}\) be short such that \(\vec{v}^{T} \coloneqq \vec{u}^{T} \cdot \mat{A} \bmod q\)  is short.
- Compare:
  - \(\vec{u}^{T} \cdot \vec{c} \equiv \vec{u}^{T} \cdot \vec{A} \cdot \vec{s} + \vec{u}^{T} \cdot \vec{e} \equiv \vec{v}^{T} \cdot \vec{s} + \vec{u}^{T}\cdot \vec{e}\)  \(\Rightarrow\) *short-ish*
  - \(\vec{u}^{T} \cdot \vec{c}\) \(\Rightarrow\) *uniform*
- The shorter \((\vec{u},\vec{v})\) the fewer \(\vec{u}^{T} \cdot \vec{c}\) we need
- Note
#+begin_export latex
\[
  \begin{pmatrix}
    q\mathbf{I} & \mathbf{A}^{T}\\
    0 & \mathbf{I}\\
  \end{pmatrix} \cdot
  \begin{pmatrix}
    \vec{*}\\
    \vec{u}
  \end{pmatrix} = 
  \begin{pmatrix}
    \vec{v}\\
    \vec{u}
  \end{pmatrix}  
\]
#+END_EXPORT
  
** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.4
:END:

*** Approx-SVP                                                    :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:

Find vectors \((\vec{u}_i, \vec{v}_i)\) of norm \(\|(\vec{u}_i, \vec{v}_i)\| \leq \beta\) amongst the integer combinations of the columns of \(\mat{B} \in \ZZ^{d \times d}\):
#+begin_export latex
\[
  \mat{B} = \begin{pmatrix}
 q\mat{I} & \mat{A}^{T}\\
 0        & \mat{I}\\
  \end{pmatrix}
\]
#+end_export

*** Search Variant                                             :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

Can extend this to recover \(\vec{s}\): guess a component and run the distinguisher

* Why we're here I

_NIST's ask:_

| AES 128 | \(2^{170}\)/MAXDEPTH quantum gates or \(\mathbf{2^{143}}\) classical gates[fn::"/In particular, NIST will define a separate category for each of the following security requirements (listed in order of increasing strength): 1) Any attack that breaks the relevant security definition must require computational resources comparable to or greater than those required for key search on a block cipher with a 128-bit key (e.g. AES128)/" fullcite:NISTPQC17] |

_Current estimates:_

#+begin_src python :kernel sagemath :dir /home/malb/Projects/lattices/estimator
from estimator import *
_ = LWE.estimate(schemes.Kyber512)
#+end_src

#+RESULTS:
#+begin_example
bkw                  :: rop: ≈2^178.8, m: ≈2^166.8, mem: ≈2^167.8, b: 14, t1: 0, t2: 16, ...
usvp                 :: rop: ≈2^143.8, red: ≈2^143.8, δ: 1.003941, β: 406, d: 998, tag: usvp
bdd                  :: rop: ≈2^140.3, red: ≈2^139.7, svp: ≈2^138.8, β: 391, η: 421, d: 1013, tag: bdd
dual                 :: rop: ≈2^149.9, mem: ≈2^97.1, m: 512, β: 424, d: 1024, ↻: 1, tag: dual
dual_hybrid          :: rop: ≈2^139.2, red: ≈2^139.0, guess: ≈2^136.2, β: 385, p: 6, ζ: 15, ...
#+end_example

#+begin_center
*@@beamer:{@@139.2 < 143@@beamer:}@@*
#+end_center

* Why we're here II

#+begin_quote
_Ethical considerations._ Although Picante demonstrates significant progress towards attacking real-world LWE problems with sparse binary secrets, *it cannot yet break* problems with real-world-size parameters. In particular, the LWE schemes standardized by NIST use smaller modulus q and non-sparse secret distributions. Hence, we do not believe our paper raises any ethical concerns. Nonetheless, we shared a copy of the current paper with the NIST Cryptography group, to inform them of our approach.
#+end_quote

- {{{fnsize(fullcite:CCS:LSWMGCL23)}}}
 
* Programme

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.45
:END:

_This Talk:_

- Higher-level discussion of the "dual attack" which seems to come out on top in security estimates
- Discussion of ML attacks on LWE  

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.55
:END:

_John's Talk:_

- Opening the box of the underlying algorithm for finding short vectors (sieving) and its costs

* Dual-Sieve Attacks

** 
:PROPERTIES:
:BEAMER_env: columns
:END:

*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_opt: t
:BEAMER_col: 0.47
:END:

_An Abridged History of …_

- cite:Aharonov:2005:LPN use short vectors to distinguish
- cite:USENIX:ADPS16 a lattice sieve _yields many short vectors_
- cite:EC:Albrecht17 guess _multiple coordinates_ of the secret and _reuse reduced bases_
- cite:AC:GuoJoh21 speed up evaluating distinguisher with a Fast Fourier Transform (FFT)
- cite:Matzov22 improve dual attack with modulus switching technique  

*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_opt: t
:BEAMER_col: 0.53
:END:

_… Dual-Sieve Attacks, Reconsidered_

@@beamer:\footnotesize@@

- fullcite:EPRINT:DucPul23
- fullcite:EPRINT:PouShe23
- fullcite:EPRINT:DucPul23b
  
@@beamer:\par@@

* Dual-Sieve Attacks

- Consider \(\vec{c} \equiv \mat{A} \cdot \vec{s} + \vec{e} \bmod q\) with both \(\vec{s}\) and \(\vec{e}\) short or \(\vec{c}\) uniform.
- Write \(\vec{s} = (\vec{s}_{\ell}, \vec{s}_{g})\) and \(\mat{A} = [\mat{A}_{\ell} \mid \mat{A}_{g}]\)
- Let \(\vec{u}_{i}\) be short such that \(\vec{v}_i^{T} \coloneqq \vec{u}_i^{T} \cdot \mat{A}_{\ell} \bmod q\)  is short.
- Pressing the "sieve" button once gives us exponentially many such vectors.
- We have
  #+begin_export latex
\(
\vec{u}_i^{T} \cdot \vec{c}
\equiv \vec{u}_i^{T} \cdot (\vec{A}_{\ell} \cdot \vec{s}_{\ell} + \vec{A}_{g} \cdot \vec{s}_{g})  + \vec{u}_i^{T} \cdot \vec{e}
\equiv \vec{v}_i^{T} \cdot \vec{s}_{\ell} + \vec{u}_i^{T} \cdot \vec{A}_{g} \cdot \vec{s}_{g} +  \vec{u}_i^{T}\cdot \vec{e}
\)
  #+end_export
- Let \(\tilde{\vec{s}}_{g}\) be a guess for \(\vec{s}_{g}\) and consider
  #+begin_export latex
  \[
  \vec{v}^{T} \cdot \vec{s}_{\ell} + \vec{u}_i^{T} \cdot \vec{A}_{g} \cdot \vec{s}_{g} \highLight[BrightOrange]{- \vec{u}_i^{T} \cdot \vec{A}_{g} \cdot \tilde{\vec{s}}_{g}} + \vec{u}_i^{T}\cdot \vec{e}
  \equiv \vec{v}_i^{T} \cdot \vec{s}_{\ell}
  + \highLight[BrightOrange]{\vec{u}_i^{T} \cdot \vec{A}_{g} \cdot \left(\vec{s}_{g} - \tilde{\vec{s}}_{g}\right)}
  + \vec{u}_i^{T}\cdot \vec{e}
\]\vspace{-\baselineskip}
  #+end_export
- Correct guess: _small-ish_ value; incorrect guess _uniform-ish_ value.
- Score guesses by sums of these values for different \((\vec{v}_i, \vec{u}_i)\)  
      
* "Small-ish" and "Uniform-ish" Unpacked

*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

Success depends on the geometry of
  #+begin_export latex
\[
\Lambda \subset \Lambda_{q}^{\bot}(\mat{A}_{\ell})  = \{\vec{u} \in \ZZ^{m} \mid \vec{u}^{T} \cdot \mat{A}_{\ell} \equiv \vec{0} \bmod q\},
\]
  #+end_export
lattice spanned by outputs of the sieve.

- We are asking our correct guess to "win" against all wrong guesses for \(\tilde{\vec{s}}_{g}\)
- "Winning" means being closer to \(\Lambda\)
- cite:EPRINT:DucPul23 shows that this goes wrong when modelling the outcome of the wrong guesses as uniformly random
- Given enough targets there will be random targets that are closer to \(\Lambda\) than the correct \(\Rightarrow\) "contradictory regime"


*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:END:

#+begin_center 
_Follow-up work_
#+end_center

#+attr_latex: :height .75\textheight  :options keepaspectratio
[[./ludo.png]]

* Alternative Approach

*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.55
:END:

- Starts over and proves a variant of the dual attack _without any statistical assumption_
- Does not model/prove "modulus switching" which greatly reduces guessing cost.  
- Provable variant works in a regime that complements the contradictory regime of cite:EPRINT:DucPul23
- _Caveat:_ premises of provable variant and of contradictory regime differ
- Work also gives a guestimate of what this attack with modulus-switching added could cost (spoiler: similar to costs of cite:Matzov22.)
  
*** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.45
:END:

#+attr_latex: :height .8\textheight  :options keepaspectratio
[[./yixin.png]]

* Summary

*** 
:PROPERTIES:
:BEAMER_opt: t
:BEAMER_env: columns
:END:

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.6
:END:

- Heuristics used in dual-attack analysis are being cleaned up, community is gaining clarity on its expected performance
- But this only treats statistical/geometric questions, but not computational costs
  - See John's talk 

**** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.4
:END:

- It seems _morally wrong_ that the dual attack would beat the primal attack. If the universe is _just_, the somewhat direct approach _should_ beat running lattice reduction on the transpose and computing inner products.

* ML Attacks


** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:BEAMER_opt: t
:END:

@@beamer:{\footnotesize@@

- fullcite:NeurIPS:WCCL22 
- fullcite:CCS:LSWMGCL23

@@beamer:\par}@@

** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.5
:BEAMER_opt: t
:END:

@@beamer:{\footnotesize@@

- fullcite:EPRINT:LSWACL23
- fullcite:EPRINT:SWLNSCL24 

@@beamer:\par}@@

* Claims
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

#+begin_quote
_Ethics and Broader Impact._ The primary value of this work is in alerting the cryptographic and ML communities to the risk of ML-based attacks on PQC. Even if current attacks do not succeed, we believe that *providing early warning of potential threats is critical*. However, we emphasize that SALSA represents a proof of concept that cannot be used against real-world implementations (i.e. the PQC schemes which NIST standardized on July 5, 2022). Additional scaling work would be necessary before these techniques would be relevant to attacking real-world cryptosystems." -- cite:NeurIPS:WCCL22
#+end_quote

#+beamer: \framebreak

#+begin_quote
_Ethical considerations._ Although Picante demonstrates significant progress towards attacking real-world LWE problems with sparse binary secrets, *it cannot yet break* problems with real-world-size parameters. In particular, the LWE schemes standardized by NIST use smaller modulus q and non-sparse secret distributions. Hence, we do not believe our paper raises any ethical concerns. Nonetheless, we shared a copy of the current paper with the NIST Cryptography group, to inform them of our approach. --  cite:CCS:LSWMGCL23
#+end_quote

#+beamer: \framebreak

#+begin_quote
_Limitations and broader impact._ Despite significantly advancing the state-of-the-art in ML-based
LWE attacks, VERDE *cannot yet break* standardized LWE-based PQC schemes, limiting its real-world
impact. Because of this, our paper raises no immediate security concerns. Nevertheless, we have
shared a copy of our paper with the NIST PQC group to make them aware of this attack. -- cite:EPRINT:LSWACL23
#+end_quote

#+beamer: \framebreak

#+begin_quote
_8. Impact Statement_ The main ethical concern related to this work is the possibility of our attack compromising currently-deployed PQC system. However, *at present, our proposed attack does not threaten current standardized systems*. If our attack scales to higher \(h\) and lower \(q\) settings, then its impact is significant, as it would necessitate changing PQC encryption standards. For reproducability of these results, our code will be open sourced after publication and is available to reviewers upon request. -- cite:EPRINT:SWLNSCL24 
#+end_quote

* Attack Description

** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.35
:END:

[[./salsa-fresca-algorithm.png]]

** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.65
:END:

Recent versions of the attack (VERDE/FRESCA) are essentially variants of the dual attack.

- \(\vec{u}^{T} \cdot \vec{c} \equiv \vec{u}^{T} \cdot \vec{A} \cdot \vec{s} + \vec{u}^{T} \cdot \vec{e} \equiv \vec{v}^{T} \cdot \vec{s} + \vec{u}^{T}\cdot \vec{e}\)  \(\Rightarrow\) *short-ish*
- \(\vec{u}^{T} \cdot \vec{c}\) \(\Rightarrow\) *uniform*

*** Distinguishers

Modelling \(\vec{v}^{T} \cdot \vec{s} + \vec{u}^{T}\cdot \vec{e}\) as a discrete Gaussian mod \(q\) we can compute the statistical distance between these two distributions and thus the number of samples we need to distinguish with constant advantage.

* Comparison with State of the Art: SALSA VERDE I

#+attr_latex: :height .7\textheight :options keepaspectratio,page=3,frame
[[./crypto2023rump-paper13.pdf]]

{{{fnsize(https://crypto.iacr.org/2023/rump/crypto2023rump-paper13.pdf)}}}

* Comparison with State of the Art: SALSA VERDE II

#+attr_latex: :height .7\textheight :options keepaspectratio,page=6,frame
[[./crypto2023rump-paper13.pdf]]

{{{fnsize(https://crypto.iacr.org/2023/rump/crypto2023rump-paper13.pdf)}}}

* Comparison with Something: SALSA FESCA I

[[./salsa-fresca-results.png]]

#+begin_src python :kernel sagemath :dir /home/malb/Projects/lattices/estimator
from estimator import *
params = LWE.Parameters(n=1024, q=2^50, Xs=ND.SparseTernary(n=1024, p=7, m=7), Xe=ND.DiscreteGaussian(3))
LWE.primal_hybrid(params)
#+end_src

#+RESULTS:
: rop: ≈2^48.4, red: ≈2^48.1, svp: ≈2^46.2, β: 41, η: 2, ζ: 478, |S|: ≈2^42.6, d: 1213, prob: 0.189, ↻: 22, …

#+begin_center 
\(\approx 52\) hrs vs \(977 \cdot 26 + 47.4 \approx 25402\) hrs 
#+end_center

* Comparison with *Something*: SALSA FESCA II

The "lattice estimator"[fn::https://github.com/malb/lattice-estimator] picks \beta = 40 as a lower bound, it is not designed to handle such easy instances.

#+begin_src python
with local_minimum(40, max(2 * params.n, 41), precision=5) as it:
    for beta in it:
        cost = self.cost_gsa(
            beta=beta, params=params, m=m, red_cost_model=red_cost_model, **kwds
        )
        it.update(cost)
    for beta in it.neighborhood:
        cost = self.cost_gsa(
            beta=beta, params=params, m=m, red_cost_model=red_cost_model, **kwds
        )
        it.update(cost)
    cost = it.y
#+end_src

{{{fnsize(https://github.com/malb/lattice-estimator/blob/main/estimator/lwe_primal.py#L209-L220)}}}

* High-Level 

There is no particular reason to believe that ML can threaten LWE.

** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.6
:END:

[[./regev-hard-learning-problems.png]]


** 
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: 0.4
:END:

- _LWE_ is (designed to be) a hard learning problem.
- _ML_ classifiers exploit statistical patterns in the data.[fn::This is a reason why they work somewhat well on e.g. side-channel traces.]

*** Open Problem                                                  :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:

Not easy to establish the state of the art for LWE instances within range of experiments. More advanced algorithms lack efficient, versatile and public implementations.

* Fin & Obligatory "We're hiring" Slide
:PROPERTIES:
:BEAMER_OPT: standout
:END:

#+BEGIN_CENTER
\Huge \alert{Thank You}
#+END_CENTER

- KCL :: Academic staff, postdocs and PhD students (all areas of cryptography)
- SandboxAQ :: Postdoc/PhD/FTEs/Consultants: PQC PhD residencies, PQC Postdocs, Cryptography SWE

* References
:PROPERTIES:
:BEAMER_OPT: allowframebreaks
:END:

#+BEGIN_EXPORT LaTeX
\renewcommand*{\bibfont}{\scriptsize}
\printbibliography[heading=none]
#+END_EXPORT

* Technical Artefacts                                                 :noexport:

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-beamer-export-to-latex nil t)
# End:
